<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN"
"http://forrest.apache.org/dtd/document-v20.dtd">
<document xml:lang="en">
  <header>
    <title>Project Management</title>

    <version major="0" minor="1"
    tag="$Id$">First
    draft</version>

    <authors>
      <person email="sjur.moshagen@samediggi.no" name="Sjur N. Moshagen" />
    </authors>

    <abstract>An overview of methods, tools and processes for managing
    software development projects. Language technology projects are
    essentially software development, and proofing tools development even more
    so.</abstract>
  </header>

  <body>
    <section>
      <title>Links</title>

      <p>Initially, this is just a collection of links to useful internal and
      external documents:</p>

      <ul>
        <li>An <a href="projmantools.html">overview and evaluation</a> of
        software tools to support project management</li>

        <li>A <a href="http://www.dixite.com/pages/pdf/sposs_v1.0.pdf">document
        describing the whole software production process</a> using OSS (Open
        Source Software) - from <a
        href="http://www.dixite.com/docs/spposs/">Dixite.com</a></li>
      </ul>
    </section>

    <section>
      <title>Development process</title>

      <p>The main highlights from the Dixite document is the following process
      and related tools:</p>

      <ol>
        <li>Planning - <a href="http://maven.apache.org/">Apache
        Maven</a></li>

        <li>Requirement Analysis and Specification - <a
        href="http://argouml.tigris.org/">ArgoUML</a>, CVS and DocBook (XML)
        as well as LaTeX for (version control of) documentation</li>

        <li>Design and Specification - Dixite uses <a
        href="http://argouml.tigris.org/">ArgoUML</a>, and <a
        href="http://www.xfig.org/">Xfig</a> (runs under X11) for higher level
        graphing, I suggest we use <a
        href="http://www.omnigroup.com/applications/omnigraffle/">OmniGraffle</a>
        for graphing purposes.</li>

        <li>Implementation and Unit Testing - a plethora of software,
        depending on the tasks at hand.</li>

        <li>System Integration and Testing - <a
        href="http://www.junit.org/index.htm">JUnit</a> and <a
        href="http://www.bugzilla.org/">Bugzilla</a></li>

        <li>Delivery and Maintenance - <a
        href="http://www.bugzilla.org/">Bugzilla</a></li>
      </ol>

      <p>We have so far not had any real development process, only doing bits
      of 4 and 5 without support from a real plan, no design, no
      specifications, and testing only of the inflection of the linguistic
      models (we have very recently added the facilities to test two-level
      rules, but that isn't put to much use yet).</p>
    </section>

    <section>
      <title>Software we have</title>

      <p>We are already using several of the tools listed by Dixite (CVS,
      Bugzilla, XML-based documentation). If we set up a development process
      similar to the above, with software used specified, we arrive at the
      following:</p>

      <ol>
        <li>Planning – [nothing really, that is, MS Word and Excel] see the <a
        href="projmantools.html">list of candidates</a> for more info</li>

        <li>Requirement Analysis and Specification – Forrest</li>

        <li>Design and Specification – Forrest</li>

        <li>Implementation and Testing –</li>

        <li>System Integration and Testing –</li>

        <li>Delivery and Maintenance – Forrest, CVS, Bugzilla</li>
      </ol>
    </section>

    <section>
      <title>Suggested additions to our tool chest</title>

      <p>For the missing parts I suggest we look more into the following
      packages:</p>

      <ul>
        <li><a href="http://maven.apache.org/">Apache Maven</a> – project
        management (but cf also the list of <a
        href="projmantools.html">commercial project management tools</a>)<ul>
            <li>Maven is now officially dead - see the home page. The most
            likely candidate now is the commercial, Mac-only tool Merlin (<a
            href="/doc/admin/projmantools.html#Merlin+1.3.6">more
            info</a>).</li>
          </ul></li>

        <li><a href="http://argouml.tigris.org/">ArgoUML</a> – design,
        specifications and use cases.</li>

        <li><a href="http://www.junit.org/index.htm">JUnit</a> derivatives for
        our purposes (= more systematic testing) - if we can't find something
        suitable, we need to look into what we can do ourselves to ensure
        proper regression testing and testing routines in general. The present
        testing system is too random, and doesn't automatize the process of
        checking against earlier bugfixes when new bugs have been fixed.</li>

        <li><a
        href="http://www.omnigroup.com/applications/omnigraffle/">OmniGraffle</a>
        — we are already using it for small-scale drawing, I suggest we buy
        full licenses for this one</li>

        <li>OmniOutline — it is included with our computers, and is a good
        tool for developing plans, and all sorts of outline activities more
        advanced than what can be done with the wiki format</li>
      </ul>
    </section>

    <section>
      <title>Updated software list</title>

      <p>After having investigated several tools and options, the following
      set of tools is what we will use for the main phases of our project
      (editors of different types, like SubEthaEdit, emacs and XXE, are not
      listed, just assumed):</p>

      <ol>
        <li>Planning – Merlin, OmniOutline, OmniGraffle, Forrest</li>

        <li>Requirement Analysis and Specification – Forrest, Merlin, ArgoUML,
        OmniOG</li>

        <li>Design and Specifiation – Forrest, Merlin, ArgoUML, OmniOG</li>

        <li>Implementation and Testing – Xerox, home-made testing routines,
        Bugzilla</li>

        <li>System Integration and Testing – Bugzilla, software from
        integrators, home-made testing routines</li>

        <li>Delivery and Maintenance – Forrest, CVS, Bugzilla</li>
      </ol>

      <p>What is still open, is how to test Aspell and similar engines, as
      well as the hyphenation. For Aspell and other Unix spellers, a lot of
      testing can be automated, and the routines needs to be worked out. All
      testing needs to be formalised, and the results should be collected
      systematically, preferably automatically, and stored and processed to
      monitor the development of the tools.</p>
    </section>

    <section>
      <title>UML References</title>

      <p>UML is news to most of us, so here's a list of references.</p>

      <ul>
        <li><a
        href="http://en.wikipedia.org/wiki/Unified_Modeling_Language">UML in
        WikiPedia</a></li>

        <li>What is a <a href="http://en.wikipedia.org/wiki/Use_case">Use
        Case</a>?</li>

        <li><a
        href="http://www.methodsandtools.com/archive/archive.php?id=24">Understanding
        Use Case Modelling</a></li>

        <li><a
        href="http://www.methodsandtools.com/archive/archive.php?id=8">Precise
        Use Cases</a></li>

        <li>ArgoUML <a
        href="http://argouml.tigris.org/documentation/defaulthtml/manual/">User
        Manual</a></li>
      </ul>
    </section>
  </body>
</document>