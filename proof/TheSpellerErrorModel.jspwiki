This document describes the different parts of the error model used to create
suggestions for the spellers, how they interact, and how one can turn the
different parts on and off.

!!!Makefile configurations

The file {{tools/spellcheckers/fstbased/desktop/hfst/Makefile.am}} looks like
this, with default values as given by the {{und/}} template:

{{{
# This is the default weight for all editing operations in the error model:
DEFAULT_WEIGHT=10

# Edit distanse for the Levenshtein error model:
EDIT_DISTANCE=2

# Define whether we allow changes to the initial letter(s) in the error model,
# possible values are:
# * no    - no longer string edits = only the default, letter-based error model
# * txt   - use only the txt file as source
# * regex - use only the regex file as source
# * both  - use both the txt and regex files as sources
# NB!!! Setting this to anything but 'no' will greatly increase the size and
# search space of the error model, and thus make it much, much slower. Make sure
# you TEST the resulting error model properly and thoroughly, both for speed
# and suggestion quality.
INITIAL_EDITS=no

# Variable to define whether to enable edits of longer strings (as opposed to
# single letters). Possible values are:
# * no    - no longer string edits = only the default, letter-based error model
# * txt   - use only the txt file as source
# * regex - use only the regex file as source
# * both  - use both the txt and regex files as sources
STRING_EDITS=txt
# Variable to specify the edit distance for the regex
# version of the strings file. The total edit distance for those operations is
# this value multiplied with the value of the DEFAULT_EDIT_DIST variable.
STRING_REGEX_EDIT_DISTANCE=2

# Variable to define whether to enable edits of word-final strings (as opposed
# to single letters). Possible values are:
# * no    - no longer string edits = only the default, letter-based error model
# * txt   - use only the txt file as source
# * regex - use only the regex file as source
# * both  - use both the txt and regex files as sources
FINAL_STRING_EDITS=no

# Variable to define whether to enable whole-word replacements. Possible values:
# - yes
# - no
WORD_REPLACEMENTS=no
}}}

The different options are described above in the comments. In the following
discussion only the relevant options are listed. We'll start with a minimal
error model:

!!!A minimal error model

{{{
DEFAULT_WEIGHT=10
EDIT_DISTANCE=2
INITIAL_EDITS=no
STRING_EDITS=no
FINAL_STRING_EDITS=no
WORD_REPLACEMENTS=no
}}}

That is, the error model contains only a Levenshtein edit distance {{2}} error
model with no additional components. It can be illustrated like this (the
multiplication factor {{2}} is taken from the {{Makefile.am}} variable
{{EDIT_DISTANCE}}, and {{.#.}} marks the beginning and end of the word):

[../images/SimpleErrorModel.png]

(Strictly speaking, the error model could have been even simpler, by specifying
an edit distance of one. But that will in most cases produce a very bad speller,
so we stick to the default editing distance 2 default value.)

The file used to specify the letters of the error model is:

{{{
tools/spellcheckers/fstbased/desktop/hfst/editdist.default.txt
}}}

In that file you specify the whole alphabet used for the error model (that is,
all and only the letters you want to be used when generating correction
suggestions). The default weight for each modification of the input misspelling
is specified in the {{Makefile.am}} variable:

{{{
DEFAULT_WEIGHT=10
}}}

That is, every letter change is given a default weight of {{10}} (in addition
to whatever weight is already present, e.g. from the corpus).

One can change this default for individual letters in the alphabet in the
{{editdist.default.txt}} file (which will then change the weight for all pairs
involving that letter), or for specific transitions:

{{{
## Inclusions: this is the real alphabet definition:
a
á	5
b
c
č	6

## Transition pairs + weight - section separator:
@@

## Transition pair specifications:
a	á	4
á	a	4
}}}

In the above fragment, the letters {{a}}, {{b}} and {{c}} will have a default
weight of {{10}} for all changes involving these letters, whereas changes
involving {{á}} and {{č}} will have a non-default weight as specified. In
addition, the change from {{a}} to {{á}} (and the other way around) is given a
weight of {{4}}.

!!!Slightly more complex - adding STRING_EDITS

The {{STRING_EDITS}} variable governs whether longer stretches than single
characters (ie strings) can be changed in one editing operation. It has four
possible values:

;''no''    : no STRING_EDITS operations
;''txt''   : STRING_EDITS taken from a txt file
;''regex'' : STRING_EDITS taken from a regex file
;''both''  : STRING_EDITS taken from both a txt and  a regex file

!!STRING_EDITS=txt

Using a txt file as the input file for {{STRING_EDITS}} operations, you edit
a very simple data structure:

{{{
gi:giija	-2
riikka:rihká	-2
rg:rgg	-2
rgg:rg	-2
}}}

The format is:

* input string
* colon
* output string to replace the input string
* TAB
* weight specification (numeric type real)

The intended use is to replace sequences of characters that typically get
spelled wrongly with their correct counterpart, such that the expected
suggestions appear on top or among the top 5. This can be useful also in cases
where the actual editing distance between input and output is only one, e.g.
when the error is part of a regular but context-restricted pattern.

The filename for this file is: {{strings.default.txt}}. The {{default}} part
can be replaced with names for alternative writing systems or orthographies, to
be used in spellers for those writing systems or orthographies.

The string pairs in this file is compiled in as a parallel fst to the
Levenshtein edit distance model, and the editing distance variable is applied to
both. That is, with the following setup:

{{{
EDIT_DISTANCE=2
STRING_EDITS=txt
}}}

we get an error model that could be illustrated as follows:

[../images/ErrorModelWithStrings.png]

!!STRING_EDITS=regex

The file for the regex string editing model is: {{strings.default.regex}}.

!!STRING_EDITS=both
