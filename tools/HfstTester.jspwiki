!!!Setup + requirements

We have a new tool to test the integrity of our {{LexC}} lexicons: [HfstTester.py|http://www.bbqsrc.net/#hfsttester]. The original source code is from [Apertium|http://apertium.svn.sourceforge.net/svnroot/apertium/incubator/apertium-tgl-ceb/dev/verbs/HfstTester.py@28665], but we have our own copy in [the main repository|https://victorio.uit.no/langtech/trunk/gt/script/HfstTester.py].

The test script __requires__ Python 2.7, and won't run if that version isn't found. On the Mac you need to use MacPorts (possibly through Porticus) to install a recent Python version (standard MacOS X 10.6 comes with Python 2.6). In addition, it __requires__ {{py-yaml}}, to be able to parse yaml-formatted test data files. Use MacPorts to install also this one.

The script is presently only made for hfst-lookup, there's no support for the Xerox tools (it should probably be easy to add, though).

__Update:__ Xerox support is now built in, see the end of this page for more details.

!!!Test data

The test data is quite simple, and in the following form:

{{{
Config:
  Gen: sma/bin/sma-gen.hfst
  Morph: sma/bin/sma.hfstol

Tests:
  Noun - gåata:
    gåata+N+Sg+Nom: gåata
    gåata+N+Sg+Acc: gåatam
    gåata+N+Sg+Gen: gåatan
    gåata+N+Sg+Ill: gåatese
    gåata+N+Sg+Ine: gåatesne
    gåata+N+Sg+Ela: gåateste
    gåata+N+Sg+Com: gåatine
    gåata+N+Pl+Nom: gåatah
    gåata+N+Pl+Acc: gåatide
    gåata+N+Pl+Gen: gåataj
    gåata+N+Pl+Ill: gåatide
    gåata+N+Pl+Ine: gåatine
    gåata+N+Pl+Ela: gåatijste
    gåata+N+Pl+Com: gåatajgujmie
    gåata+N+Ess: gåatine
}}}

Such test data can easily be generated using our paradigm generator (the output of course needs to be proofread and checked).

!!!Usage

Presently the only way to use it is by manually running the test script. In the future it will be integrated with our build environment, to automatically ensure that everything is working as it should.

To manually run a test on a test file, do as follows:

{{{
gt sjur$ HfstTester.py -c sma/testing/sma-tests.yaml
}}}

__-c__ indicates coloured output, {{sma/testing/sma-tests.yaml}} is the test data file. That file also contains a reference to the analysing and generating transducers to be used in the test.

{{{gt sjur$ HfstTester.py -h}}}

gives more details.

The {{-t, --test}} option takes as argument a test ID, e.g. {{-t "Noun - gåata"}} in the test data above. Using this, the script will only run this test set, nothing else.

!!!Output

The output is a test report of the following form:

{{{
-----------------------------------------
Test 0: Noun - gåata (Lexical/Generation)
-----------------------------------------
[PASS] gåata+N+Pl+Gen => gåataj
[PASS] gåata+N+Pl+Nom => gåatah
[PASS] gåata+N+Sg+Acc => gåatam
[PASS] gåata+N+Sg+Nom => gåata
[PASS] gåata+N+Pl+Com => gåatajgujmie
[PASS] gåata+N+Sg+Ine => gåatesne
[PASS] gåata+N+Sg+Ela => gåateste
[PASS] gåata+N+Pl+Ine => gåatine
[PASS] gåata+N+Sg+Ill => gåatese
[PASS] gåata+N+Sg+Com => gåatine
[PASS] gåata+N+Pl+Acc => gåatide
[PASS] gåata+N+Pl+Ill => gåatide
[PASS] gåata+N+Pl+Ela => gåatijste
[PASS] gåata+N+Ess => gåatine
[PASS] gåata+N+Sg+Gen => gåatan
Test 0 - Passes: 15, Fails: 0, Total: 15

---------------------------------------
Test 1: Noun - gåata (Surface/Analysis)
---------------------------------------
[PASS] gåataj => gåata+N+Pl+Gen
[PASS] gåatah => gåata+N+Pl+Nom
[PASS] gåatam => gåata+N+Sg+Acc
[PASS] gåata => gåata+N+Sg+Nom
[PASS] gåatajgujmie => gåata+N+Pl+Com
[FAIL] gåatajgujmie => Expected: gåata+N+Pl+Com, Got: gåata+N+PlGenCmpgujmie+CmpN/SgN+CmpN/SgG+CmpN/PlG+N+Sg+Nom
[PASS] gåatesne => gåata+N+Sg+Ine
[PASS] gåateste => gåata+N+Sg+Ela
[PASS] gåatine => gåata+N+Ess
[PASS] gåatine => gåata+N+Pl+Ine
[PASS] gåatine => gåata+N+Sg+Com
[PASS] gåatese => gåata+N+Sg+Ill
[FAIL] gåatese => Expected: gåata+N+Sg+Ill, Got: gåata+N+Sg+Nom+PxSg3
[PASS] gåatine => gåata+N+Ess
[PASS] gåatine => gåata+N+Pl+Ine
[PASS] gåatine => gåata+N+Sg+Com
[PASS] gåatide => gåata+N+Pl+Acc
[PASS] gåatide => gåata+N+Pl+Ill
[PASS] gåatide => gåata+N+Pl+Acc
[PASS] gåatide => gåata+N+Pl+Ill
[PASS] gåatijste => gåata+N+Pl+Ela
[PASS] gåatine => gåata+N+Ess
[PASS] gåatine => gåata+N+Pl+Ine
[PASS] gåatine => gåata+N+Sg+Com
[PASS] gåatan => gåata+N+Sg+Gen
[FAIL] gåatan => Expected: gåata+N+Sg+Gen, Got: gåetie+CmpN/SgN+CmpN/SgG+CmpN/PlG+N+Sg+Ill
Test 1 - Passes: 23, Fails: 3, Total: 26
}}}

To get a more compact test report, run it as follows:

{{{
gt sjur$ HfstTester.py -c -f -p sma/testing/sma-tests.yaml
-----------------------------------------
Test 0: Noun - gåata (Lexical/Generation)
-----------------------------------------
Test 0 - Passes: 0, Fails: 15, Total: 15

---------------------------------------
Test 1: Noun - gåata (Surface/Analysis)
---------------------------------------
Test 1 - Passes: 23, Fails: 3, Total: 26
}}}

!!!Known limitations and shortcomings

* at present the test script is not integrated with the makefile
* there is no real test data for any language, only a demo test file for {{sma}}
* you need to manually compile the transducers before running the tests

!!!Bugs

!!Lists of wordforms as strings

Lists of wordforms are sometimes treated as strings instead of lists. This results in output of the following type:

{{{
------------------------------------------
Test 0: Noun - gåetie (Lexical/Generation)
------------------------------------------
[FAIL] gåetie+N+Pl+Acc => Expected: [u'g\xe5etide', u'g\xf6\xf6tide'], Got: gåetie+N+Pl+Acc+?
[FAIL] gåetie+N+Pl+Com => Expected: [u'g\xe5etiejgujmie', u'g\xf6\xf6tigujmie'], Got: gåetie+N+Pl+Com+?
}}}

corresponding to input of type:

{{{
    gåetie+N+Pl+Acc: [gåetide, göötide]
    gåetie+N+Pl+Com: [gåetiejgujmie, göötigujmie]
}}}

This happens mostly when using the {{hfst-lookup}} tool, not when using the xerox {{lookup}} tool, although there has been some cases of this output also when using the xerox variant.

!!!Future improvements

The following list is in order of importance:

!!Preserve order of test data

In my experience, word forms and/or paradigm setup usually follows a certain pattern, and test file data will naturally follow the same pattern. It would make reading the output faster and easier if that order was preserved when printing the test output. Compare the test data and the test results above for an example of how the order of the test data has been changed.

Along the same lines, the order of the tests (f.ex. each Noun test) should also be processed in the order they are listed in the test file. This will also help in reading the test results, as it is easier to compare the input and the output.

This random ordering thing is probably due to the random ordering of Python dictionaries. Alternatives could be using an OrderedDict or pairs of tuples.

!!Really compact reporting

As one builds up a large collection of tests, the main thing to know is whether they pass or fail. In this scenario a reporting format as follows would be more useful:

{{{
FAIL - Test 0: gåata, Generation
PASS - Test 1: gåata, Analysis
---------------------------------
Total: 2 tests, 1 pass, 1 fail
---------------------------------
}}}

Then it is easy to rerun only the broken test(s) with more verbose output, to see exactly what is broken.

!!Call hfst-lookup only once per test

It looks like {{hfst-lookup}} is called once for each test case in a test. As the number of tests and test cases grow, this can become a serious bottleneck. The script should be rewritten to call the lookup tool only once pr test. Even better would be to set up two separate lookup threads, one for generation and another for analysis, and use them throughout the whole test run.

!!!Improvements already implemented

!!No fail on Analysis if at least one correct is found

In the example above, the Analysis test has three fails, all because of stray homonymy in addition to the target analysis. Unless one is actively looking for such stray analyses, they are usually noise in the test reporting, and should be ignored. That is, as long as the target analysis is found among all analyses, the test should pass. This is especially important with compounds, derivations and some verbal forms (in Sámi), as the degree of homonymy can be quite large, and subsequently the noise level. Here's an example:

{{{
----------------------------------------
Test 3: Noun - gåetie (Surface/Analysis)
----------------------------------------
...
[FAIL] gööti => Expected: gåetie+N+Pl+Gen, Got: göötedh+V+IV+Ind+Prt+Sg3
[PASS] gööti => gåetie+N+Pl+Gen
}}}

When analysing the noun ''gåetie'', the fact that some forms are homonymous with a verb reading is not a failure when testing it, and should just be ignored as long as the expected analysis is there. Otherwise there will always be failing tests, and we can't use the test bench to automatically report FAILs or PASSes for the whole morpho(phono)logy test set.

This feature has already been discussed with the author, and he has promised to look into it. It will be provided as a new option, perhaps {{-i, --ignore-extra-analyses}} or something along this line.

__⇒ DONE:__ Since svn r41104 {{-i, --ignore-extra-analyses}} will suppress FAILs caused by spurious extra analyses of wordforms.

!!Ignore warnings and other irrelevant hfst output

In some cases hfst-lookup will give warnings of the type:

{{{
[PASS] gåata+N+Sg+Ela => gåateste
hfst-lookup: warning: Lookup not supported on this automaton format: converting to HFST basic transducer and trying

Allowing all flag paths!
[PASS] gåata+N+Pl+Ine => gåatine
}}}

These warnings are usually not relevant for the evaluation of the test results (although the flag paths warning can be), and they clutter the output quite a lot. It would be very nice to be able to ignore them. One possibility would of course be that these warnings are not printed at all when using the -q or -s flags with hfst-lookup, but at the moment these flags have no effects on them.

__⇒ DONE:__ all data on {{stderr}} is now captured in a separate variable, and can be printed or redirected to other places as needed. As a consequence, the printed test results are free from these warnings.

!!Return value

The script should return 0 if all tests have passed, if not it should return the number of tests that have failed, along the same lines as other unix tools. This is useful when integrating {{HfstTester.py}} in a larger setting with automated testing and reporting.

__⇒ DONE:__ the script now returns the number of failed tests as its exit value.

!!Support for Xerox lookup, other tools

Presently {{HfstTester.py}} only supports {{hfst-lookup}}, but it would be useful to extend the tool to also be able to use the Xerox {{lookup}} tool as well as other tools (e.g. {{hfst-proc}}) for running the tests.

__⇒ DONE:__ {{HfstTester.py}} does now support the Xerox {{lookup}} tool, by specifying the {{-x, --xerox}} option. The config section of the test files have been expanded as follows:

{{{
Config:
  hfst:
    Gen: sma/bin/sma-gen.hfst
    Morph: sma/bin/sma.hfst
  xerox:
    Gen: sma/bin/isma.fst
    Morph: sma/bin/sma.fst
}}}

Adding support for other tools which give output data structured the same way as {{hfst-lookup}} and Xerox' {{lookup}} should be straightforward now that the code is already rewritten to support two variants.
