<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN"
"http://forrest.apache.org/dtd/document-v20.dtd">
<document xml:lang="en">
   <header>
      <title>How to use the morphological parsers</title>
      <authors>
         <person email="trond.trosterud@hum.uit.no" name="Trond Trosterud"/>
      </authors>
   </header>
   <body>
      <section>
         <title>Preamble: setting up the environment (You probably did this already)</title>
         <ol>
            <li>Machine setup: <a href="../infra/GettingStarted.html">Getting started</a>.</li>
            <li>Download the source files: <a href="tools/docu-svn-user.html">How to use SVN</a>.
            Remember to write <code>svnup</code> and press the return key (from now on indicated by &lt;ENTER&gt;) whenever you start working.</li>
            <li>Making the transducers (compilation):
            <a href="../infra/infraremake/GettingStartedWithTheNewInfra.html">Getting Started With The New Infra</a>.
            (Or, if you work on North Saami, write instead <code>cd main/gt</code> &lt;ENTER&gt;, and 
            <code>make GTLANG=sme</code>.) </li>
         </ol>
      </section>
      <section>
         <title>Analysing and generating words</title>
            <ol>
               <li>For analysis, write <code>u</code> and then the 3-letter language code, e.g. for North Sami,
               write <code>usme</code></li>
               <li>Then write the words that shall be analysed, one word at a time, followed by &lt;ENTER&gt;.</li>
               <li>To leave analysis mode, press <code>ctrl C</code>.</li>
               <li>For generation, write <code>d</code> and then the 3-letter language code, e.g. for North Sami,
               write <code>dsme</code></li>
               <li>Then write lemma and grammatical tags (in the same form as was given as output, followed by &lt;ENTER&gt;.</li>
            </ol>
            <p>For testing, you may also write a file with one wordform on each line, and then feed that to
            the analyser (example here is for Inari Sámi, with a file <em>testfile.txt</em>):</p>

               <p><code>cat testfile.txt | usmn | less</code></p>

	    <p>(again, to leave analysis mode, press <code>ctrl C</code>, and to leave <em>less</em>, press <code>q</code>)</p>
         </section>
<section>
<title>Text analysis</title>
            <p>We have set up aliases for text analysis. These may be written anywhere.</p>
            <dl>
               <dt>smedis</dt>
               <dd>Gives a sentence analysis of North Sámi</dd>
               <dt>smedep</dt>
               <dd>Gives a dependency analysis of North Sámi</dd>
               <dt>smedist</dt>
               <dd>Gives a sentence analysis of North Sámi, in trace mode (showing which dis rules work)</dd>
               <dt>smedept</dt>
               <dd>Gives a dependency analysis of North Sámi, in trace mode (showing which dep rules work)</dd>
            </dl>
<p>To do the same for other languages, exchange <code>sme</code> with your
own language code. If, for any given language, the alias does not
work, it means there is no (say) dependency analysis written for that
language.</p>
<p>These aliases may be used in two ways: either write the alias followed by a sentence in quotes</p>
<p><code>smedis "Mun lean boahtán."</code></p>
<p>Or, alternatively, pipe a file through it:</p>
<p><code>cat testfile.txt | smedis</code></p>
         </section>
<section>
<title>Output manipulation</title>
         <p>Instead of just showing the result on the screen as running text (as above), much can be done to manipulate
         it. Here are some examples, all the textstrings should be added after the <em>smedis</em> etc. above.</p>
         
            <p><code>| grep '+N+Pl' &gt; plnouns</code><br/> (to get all plural nouns and save them to the file
            <em>plnouns</em>)</p>
            <p><code>| grep -v '\?' | cut -f2 | sort | uniq -c | sort -nr | less </code><br/> (to get a frequency
            list of the lexemes that the parser recognizes.</p>
            <p><code>| grep '\?' | sort | uniq -c | sort -nr | less </code> <br/> (to get a frequency list of the
            <strong>words</strong> that the parser does not recognize)</p>
            <p><code>| grep '\+\?' | sort | uniq -c | sort -nr | less </code> <br/> (to get a frequency list of the
            <strong>word forms</strong> that the parser does not recognize)</p>
         <p>To analyse more files at the same time, write their names one after another after the <code>cat</code>
         command:</p>
         <source>cat file1 file2 file3 |  ...</source>
      </section>

      <p class="last_modified">Last modified $Date$, by $Author: lene
      $</p>
   </body>
</document>
