Unix для лингвистов

Введение

Лингвистам нужен Unix, потому что Unix может управлять текстом для нас. Чтобы быть в состоянии использовать Unix, мы должны использовать интерфейс командной строки Unix. Это - введение в то, что мы должны знать о Unix, чтобы сделать то, что мы хотим. После того, как каждая секция там будет маленьким резюме.

Unix найден на Linux и на Mac OS X. Применение, которое мы используем, чтобы дать команды, обычно называют Терминалом. На MS Windows нет никакого Unix. Вы можете установить виртуальную машину Linux на Вас компьютер Windows. Альтернативно, у Вас должен быть счет на другой машине Unix. Вы можете войти в этот компьютер и использовать экран и клавиатуру на Вашей машине Windows. Чтобы подписаться в Вас, может, например, использовать программу Putty.exe.

Чтобы использовать Unix на Mac, или Linux просто открывают предельную программу. На Mac это расположено в папке для программ помощи. В Linux терминал находится в папке для программирования инструментов. Мы теперь предполагаем, что у Вас есть доступ к Unix на Вашей собственной машине


Основные команды


Команды, не щелчок мыши

Unix отличается от большинства других операционных систем, в которых у него нет графического интерфейса пользователя. Вместо этого Unix имеет то, что мы называем командной строкой, т.е. курсор ждет Вас, чтобы войти в команду. Прямо после того, как Вы зарегистрировались в свой корневой каталог, Вы находитесь в своем корневом каталоге. Налево от курсора есть короткий текст, который говорит Вам, в каком папке Вы находитесь прямо сейчас. 

Вы теперь изучите много команд. Команды должны быть написаны определенным способом. У команды Unix есть две обязательных части: команда должна начаться с названия программы, и это закончено, когда Вы нажимаете клавишу ENTER. 

* Мы пробуем простую команду: 
** Напишете date и нажимаетe ENTER. 
** В ответ Вы должны получить текущую дату и время. 
* Другая команда: 
** Напишите cal и нажмите ENTER. 
** Ответ должен быть маленьким календарем. 

С этого времени мы предположим, что Вы всегда нажимаете ENTER после команды. Поэтому "пишете ls" означает "пишете ls, и нажмите ENTER", и так же для других команд.

Большинство команд берет один или несколько аргументов. Одна такая команда - mkdir, что означает, "делайте папку" или создаёте папку. Попробуйте его: Напишите mkdir, нажмите ENTER, и Вы получите логический ответ. Чтобы заставить папку в Unix нуждается в аргументе, имя папки. Напишите например mkdir hogwash. Чтобы видеть, что произошло, напишете ls (перечислите содержание папки, в котором Вы находитесь прямо сейчас). Папку, которую только что сделали, можете теперь удалить, печатая rmdir hogwash. Попробуйте его, и затем попробуйте его снова. (Команда rmdir работает только с пустыми папками.)

С лингвистической точки зрения мы можем смотреть на команды как на глаголы. Так как все команды представляют наши запросы компьютеру, мы можем рассмотреть их как глаголы в императиве. Как другие глаголы также Unix командует переходный или непереходный. Команда как date может быть замечена как непереходный глагол: Вы пишете date, и машина говорит Вам, какой сегодня день. Команда mkdir, однако, является переходным глаголом, у нее должен быть объект, а именно, название новой папки, которую Вы хотите создать.

Таким же образом как регулярные глаголы, команды Unix также работают с неявным объектом. Интерпретация зависит от контекста. Если мы говорим, "ещь!" мы обычно имеем в виду, "Ещь еду, которая находится перед Вами". У команды Unix ls также есть такой контекстно-зависимый, неявный объект. То, что Вы действительно говорите, является "списком содержания папки, где я нахожусь сейчас". Если Вы хотите перечислить содержание определенной папки, Вы должны написать имя папки (см. ниже). То же самое относится к команде cal. Печатая cal, Вы получаете календарь этого года. Если Вы хотите знать, какой день недели мы начали новое тысячелетие, напишете cal 2000. Мы будем позже смотреть на команды с двумя объектами, версией Unix двупереходных глаголов.


Команды могут также быть изменены. Мы можем назвать эти наречия модификаторов, но программатики называют их вариантами или флагами. Различные команды берут различные наречия или флаги, и значение флага варьируется от команды до команды. Флаги, как правило, состоят из одного письма или числа, и они начинают с дефиса. На некоторых системах флаги-m вызывают в понедельник, чтобы быть первым днем недели вместо воскресенья), и-3 (шоу месяцем ранее и месяц после). 

Резюме:

* Синтаксис команды: название команды или аргумент названия команды ВХОДЯТ
* Команды: дата, cal, mkdir

Команды могут быть замечены как глаголы в императиве. Эти глаголы могут быть непереходными или переходными (не имейте ни одного, одного или более аргументов), и они могут взять наречия изменения (флаг)

Пейзаж Unix

Ваш корневой каталог расположен в другом справочнике. Это также содержит другие справочники. Но где-нибудь цепь директивной остановки. Мать всех справочников - справочник корня. У этого есть свой собственный символ в Unix, а именно, /. Чтобы видеть содержание Вашего собственного справочника корня, Вы можете напечатать ls / , i.ee "перечисляют содержание справочника корня". Не забудьте нажимать ENTER. Там Вы будете видеть некоторые загадочные имена, все названия различных справочников.

На системах Linux справочников в корне dicrectory называют home. Соответствующий справочник на компьютерах Mac называют Users. Этот справочник содержит всех пользователей на системе. Если Вы работаете над ноутбуком, Вы - вероятно, единственный пользователь. Команда ls /home или ls /Users перечисляет содержание. Одно из имен пользователя Ваше. Если Вы напишете просто ls, то Вы будете видеть все файлы и справочники, которые Вы имеете в справочнике, в котором Вы находитесь прямо сейчас.


Резюме:

* корневой каталог, справочник корня (/)
* Структура каталогов: Справочники в друг друге. В графическом интерфейсе пользователя их называют папками
* Команды: ls, ls


Создание справочников и перемещения

Создайте справочник для этого курса, давайте назовем его unixcourse. Вы таким образом пишете mkdir unixcourse. Напишите ls, и Вы видите, что справочник был создан. Если Вы тогда печатаете ls unixcourse, Вы можете узнать то, что в новом справочнике. Да, совершенно верно, ничто.

Тогда попытайтесь двинуться в справочник. Напечатайте cd unixcourse (справочник изменения "средств cd"). Проверьте если быстрое изменение. Если Вы тогда печатаете ls unixcourse, как только Вы получаете абсолютно различный ответ, чем последнее. Почему?

Причина Вы теперь получаете ответ "Никакой такой файл или папка" (или эквивалентный) состоит в том, что каталог unixcourse самостоятельно не содержит справочника, названного "unixcourse". Создайте теперь новый справочник, сочиняя, например. mkdir somename. Вы можете тогда вернуться к своему корневому каталогу, печатая CD.. (CD делает интервалы между точечной точкой), Teh две точки, средние "родительский каталог к справочнику, я теперь помогаю". Вы можете тогда напечатать ls unixcourse и получить ответ "somename"). Вы можете использовать символы.. также в других контекстах. Команда ls. означает, "перечисляют содержание родительского каталога к справочнику, я теперь помогаю". Если Вы стоите в справочнике unixcourse, и Ваш корневой каталог содержит, например, справочники unixcourse и Документы, Вы можете перечислить содержание Документов, печатая ls../документы. Точки.. означает, что "каждый выравнивает", и / означает, что каждый уравнивает. Имя Документы говорит, из какого справочника система перечислит содержание.


Один справочник более важен, чем все другие справочники: корневой каталог. Если Вы находитесь в справочнике unixcourse и хотите пойти домой, Вы могли бы написать CD.. но если Вы не уверены, где Вы, или Вы пойдете непосредственно домой, Вы можете написать только CD. Команда перемещает Вас назад в корневой каталог.

Если Вы задаетесь вопросом, где Вы, Вы можете написать pwd, что означает "печать рабочий справочник". В ответ Вы получите путь от справочника корня до справочника, в котором Вы находитесь прямо сейчас.


Резюме:

Структура каталогов: родительский каталог, справочник дочери, примечание..

Команды: 
* cd (перемещает меня домой), 
* cd  .. (перемещает меня один справочник), 
* имя cd (перемещает медиану, чтобы назвать

Относительная и абсолютная ссылка

Есть два способа относиться к файлам и справочникам в Unix. Каждый абсолютный, и другой относительно. Путем мы использовали, до сих пор относительный. Когда мы используем относительную ссылку, ссылка зависит от того, где мы стоим. Предположим, что Вы находитесь в корневом каталоге, и Вы там справочник, названный unixcourse. Тогда возможно написать ls unixcourse. Но если Вы стоите в родственном каталоге Documents, это не возможно, тогда Вы должны написать ls../unixcourse, чтобы видеть содержание. Относительная ссылка таким образом относительно того, где в системе Вы - когда Вы пишете команду. 

Когда Вы используете абсолютную ссылку, она не играет роли, где Вы стоите, потому что абсолютная ссылка показывает Вам, где файл или папка расположен, обратившись к справочнику корня, который называют/. Если Ваше имя пользователя будет trond, то печатая ls/Users/trond/unixcourses/будет работать, независимо от того в каком справочнике Вы находитесь. Ссылка на справочник unixcourse больше не относительная, но абсолютная, это дано относительно справочника корня.



Резюме:

* Относительная ссылка, в зависимости от того, как Вы находитесь в системе
* Абсолютная ссылка относится через справочник корня


Рассмотрите содержание файлов

Пойдите в справочник unixcourse, который Вы только что создали. Если Вы не знаете, где Вы, Вы можете сначала написать CD команды, и после того CD unixcourse., Вы можете создать несколько файлов. Позже мы создадим файлы с редактором текста, теперь мы делаем их немного более удобным способом с кошкой команду. Напишите кошку&gt; n-список. Ответ не обычное быстрое, но пустая строка. Напишите слово, например, Джейн, нажмите ENTER. Напишите другое имя, например, Джона, и нажмите ENTER. Напишите еще немного namnes, например, Питер, Энн, Марк, Лена, с ВХОДЯТ после каждого имени. Наконец конец Ctrl-d команды (удерживают клавишу CTRL и нажимают ключ D). Теперь Вы должны возвратить быстрое. Символ"&gt;" означает, "посылают продукцию предыдущей команды к файлу после"&gt;" символ. Эта команда таким образом создает файл "n-список".

Если Вы тогда печатаете ls, Вы видите, что у Вас есть файл, а именно, "n-список". Если Вы задаетесь вопросом, что находится в файле, Вы можете написать n-список кошки. Команда кошки тогда представит целое содержание файла и напечатает его на экране.

Если бы файл был очень длинен, то Вы предпочли бы иметь его один screenful за один раз. Чтобы получить это, Вы можете написать меньше n-списка. Для файла, простирающегося по нескольким screenlengths, Вы можете читать вперед, нажимая клавишу ENTER. Когда Вы приедете до конца файла, он скажет КОНЕЦ в обратном видео. Чтобы оставить меньше команды и возвратиться к командной строке, нажмите ключ Q.

Резюме:

Команды: 
* кошка, кошка&gt; имя файла, меньше
* Выходят из меньшего-количества-функции и возвращаются к командной строке: тип q
* Команды, чтобы управлять содержанием файлов


вид

Содержание n-списка файла в предыдущей секции может использоваться в качестве примера, чтобы изучить некоторые очень важные команды. Мы хотели бы сортировать линии файла. Напишите n-список вида, и Вы расположили в алфавитном порядке файл, каждая линия в алфавитном порядке. (Более легкий путь состоял бы в том, чтобы написать вид n и затем нажать Счет. Если n-список будет единственным файлом в справочнике, у которого есть n как его первое письмо, то Unix заполнит остальных для Вас).

Эта команда мы можем тогда изменить с флагами (наши "наречия"). Флаги написаны с начальным дефисом (-) сначала и помещены между командой и аргументом. Вместо того, чтобы писать n-список вида Вы можете написать вид-r n-список. Флаг-r означает "полностью измененный", и файл таким образом сортирован в обратном порядке.


Резюме:
* Флаги, флаг-r
* Команда: вид

grep

Другая центральная команда - grep. Это обозначает, "получают регулярное выражение", и вытаскивает все линии, которые имеют тип, который Вы определили. Напишите grep J n-список, и Вы получаете Джейн и Джона как ответ. Напишите grep n-список, и Вы получаете Джейн и Лену (но не Энн!) как ответ.

Чтобы искать более продвинутые выражения, Вы используете единственные или двойные кавычки. Команда grep имя файла mii в тексте Сами находит и 'mii' и 'huksemiid'. Чтобы искать только mii в начале слов, Вы можете написать grep имя файла 'mii'. Чтобы искать слово 'mii', Вы можете написать власть-w имя файла mii

оборот

Оборот команды полностью изменяет линии. Напишите n-список оборота и посмотрите то, что произошло.

Вы видели это? Все имена теперь написаны назад. Это сам по себе не настолько захватывающе, возможно, но, когда объединено с другими командами это будет очень полезно для нас.



Резюме:
* Команда: оборот, обратная линия ('отец' становится 'rehtaf'),

Объединение команд с |

Характер | или труба, один из главных символов в Unix. На Макинтоше труба найдена на alt-7 на других компьютерах, символ трубы может быть найден на ключе налево от номера 1 в левом верхнем углу клавиатуры. С | мы объединяем многократные команды, или скорее: мы посылаем продукцию из первой команды, как введено к следующему. Мы теперь объединим оборот команд и вид, и мы делаем это следующим образом: n-список оборота | вид | оборот. Что произошло? Мы полностью изменили имена в нашем файле, обратным списком, и повернулись назад к нормальному, оставленному более высокому тексту. Результат - сортированный список перемены имен, с которыми мы начали.



Резюме:
Символ трубы | берет продукцию от предыдущей команды, как введено к следующему.

wc

Давайте теперь расширим наш файл с некоторыми другими именами. Напишите кошку&gt;&gt; n-список и нажмите ENTER. Вы получаете пустую строку. Напишите имена Питер, Бен, Энн и Энн, все с ВХОДЯТ между ними. Тогда нажмите Ctrl-d. Различие между символами&gt; и&gt;&gt; - то, что в первом случае Вы создаете новый файл (или Вы переписываете старое), тогда как во втором случае, Вы добавляете новое содержание к уже существующему файлу. Это - очень важное различие. Если Вы работали долгое время с файлом и написали сотни линий текста, и просто хотите добавить слово или два в конце, используйте&gt;&gt;. Однако, если Вы забываете и пишете&gt; вместо этого, все те сотни линий исчезли, и все, что возвращено, два плохих слова, которые Вы хотели бы добавить. Unix не знает милосердия. Вы не вернете те сотни линий. Так будьте осторожны.

Теперь скажем, это все подходит, и у Вас есть файл, который содержит в общей сложности девять имен. Как Вы знаете, что есть 9? Команда wc (количество слов). Напишите wc n-список, и Вы видите, сколько линий, слов и изображает файл, содержит. Если Вы только хотите видеть один из трех ответов, Вы можете сделать это с флагом-l,-w и-c, следующим образом: wc-l. Флаги могут также быть объединены: wc-lw говорит, сколько линий и слов файл содержит.



Резюме:


Резюме:

* Команда: wc, говорит, сколько линий, слов и знаков там находится в файле
Пометить: у команды wc есть флаги-l,-w и-c (линии, слова и знаки)
* символ&gt;&gt;: Добавляет содержание до конца файла, в который Вы посылаете его

uniq

В n-списке несколько из линий теперь идентичны. Напишите n-список вида, и Вы будете видеть его. Если Вы интересуетесь только тем, сколько различных линий Вы имеете, а не повторениями, Вы можете напечатать n-список вида | uniq. Если Вам интересно, в том, сколько есть каждого имени, Вы можете добавить флаг-c, который обозначает "количество" к команде uniq: n-список вида | uniq-c. Более продвинутая команда - следующий, который виды согласно числу пунктов:

n-список вида | uniq-c | вид-n

Команда становится еще лучше с выбором - номер:

n-список вида | uniq-c | вид - номер

С этой командой мы сортировали список частотой. Наиболее распространенные слова на первом месте, и уникальные в конце. Слова с той же самой частотой сортированы в алфавитном порядке.


TR

TR команды изменяет характер на другого. Эта команда отличается от других команд, не беря имена файла в качестве аргумента. Чтобы изменить все письма "e" на "x" в n-списке файла, войдите в команду

n-список кошки | TR 'e' 'x' | меньше

(Помните, что Вы оставляете программу меньше, нажимая q). Эта команда дает Вам результат на экране. Если Вы хотите спасти результаты к новому типу файла вместо этого, Вы можете напечатать 

n-список кошки | TR 'e' 'x'&gt; newfile

Новый файл тогда сохранен как "newfile". Обратите внимание на то, что Вы не можете использовать то же самое имя на файле назначения и исходном файле.



Очень полезная команда TR - та, которая превращает текст в список с одним словом за линию. Чтобы достигнуть этого, мы заменим все места newline характером. newline характер мы пишем как '\n'. Начиная с какого мы имеем, список, мы начинаем, превращая его в текст:

n-список кошки | TR 'n' ''&gt; n-текст

Если Вы тогда печатаете n-текст кошки, Вы, wil видят, что имена перечисляют, находятся теперь на той же самой линии. Вы можете возвратиться к формату списка, повернув команду и написать:

n-текст кошки | TR '''\n'



Творческая лень: многократное использование той же самой команды

Очень скоро команды становятся длинными. Вместо того, чтобы печатать ту же самую команду снова и снова, Вы можете использовать клавиши курсора. Ключ Стрела дает Вам предыдущую команду. Чтобы выполнить его, Вы должны, очевидно, нажать КЛАВИШУ ENTER). Стрела еще раз дает Вам команду перед предыдущей.

Если Вы тогда пишете историю, Вы получаете список всех команд, которые Вы сделали. У каждой команды есть число. Если Вы хотите сделать, например, команду номер 55 снова, напишите! 55, и та же самая команда выполнен снова.

Длинные команды могут также быть, редактируют. Давайте скажем, что Вы написали команду

grep e n-список | газуют | вид | оборот 


Результатом был сортированный список перемены всех имен, который содержит e. Вы можете теперь нажать Стрела, получить команду снова и нажать клавишу "влево", пока Вы не достигаете e. Вы тогда удаляете его и пишете a вместо этого, и после того Вы нажимаете ENTER. Результат - сортированный глоссарий перемены всех имен, содержащих гласный a.

Если команда длинна, она может занять время, чтобы добраться до начала. Более быстрый способ добраться там нажимает ctrl-a. Чтобы возвратить до конца Вас нажимают ctrl-e.


Резюме:

история показывает предыдущие команды
ctrl-a, ctrl-e
Восклицательный знак плюс число правила дает ту же самую команду снова.



Копия, переместите и переименуйте файлы

Файлы скопированы с CP команды (для "копии"). Скопировать n-список файла к новому файлу, который Вы можете назвать n-list2, n-списком n-list2 CP типа. Заказ - таким образом "CP от к". Чтобы дать файлу новое имя, используйте команду mv (движение). Синтаксис - то же самое: старое название mv новое имя. Имя mv действительно означает движение. Попытка, сначала делающая новый справочник: 

mkdir oldfiles

Тогда команда:

n-list2 oldfiles mv

не превратит n-list2 в файл, названный oldfiles. Вместо этого это переместит файл n-list2 в справочник oldfiles.

ПРЕДУПРЕЖДЕНИЕ: Если Вы переименуете файл к имени файла уже в использовании, то старый файл будет удален. У Unix нет кнопки сожаления, таким образом, содержание старого файла будет потеряно.


Регулярные выражения



Мы используем регулярные выражения, чтобы искать классы знаков. Как испытательный документ Вы можете взять файл ''eng_vaalit2012.txt'' в каталоге [https://victorio.uit.no/langtech/trunk/courses/unix_korpus/]. Загрузите файл. Если Вы используете Mac, и настроил папку как выше, и Вы стоите в unixcourse папке, Вы можете скопировать файл к папке unixcourse с командой

CP ../Downloads/eng_vaalit2012.txt.

В команде, заключительных точечных средствах: "Скопируйте файл туда, где я теперь". Отметьте пространство между именем файла и точкой.

К глухому 'реле' последовательности в тексте, названном списком, мы написали список реле власти. Как пример мы берем эти два предложения (если Вы практикуете, Вы можете скопировать их к отдельному документу, который Вы можете назвать списком td).:


{{{
кошка eng_vaalit2012.txt | TR '''\n' | grep '^d'
кошка eng_vaalit2012.txt | TR '''\n' | grep 'd$'
кошка eng_vaalit2012.txt | TR '''\n' | вид | uniq-c | вид - номер | голова
}}}

Здесь мы также ввели новую команду, голову. Голова команды печатает первые 10 линий продукции.

Посредством регулярных выражений мы можем получить различные наборы слов из текста. Три после команд сдаются, все окончание слов - поело, закончив в последовательности {{любой характер e}}, в последовательности {{любое число знаков e}}. Заключительная команда дает все слова, заканчивающиеся в d, которому предшествует характер кроме e.

{{{
кошка vaalit2012.txt | TR '''\n' | sort|uniq|grep 'ate$'
кошка vaalit2012.txt | TR '''\n' | sort|uniq|grep 'a.e$'
кошка vaalit2012.txt | TR '''\n' | sort|uniq|grep 'a. *e$'
кошка vaalit2012.txt | TR '''\n' | sort|uniq|grep' [^e] d$'
}}}



Также возможно искать классы звуков. Таким образом [aeiouy] - класс всех гласных на английском языке. Этот поиск возвращает все слова, содержащие согласный c плюс гласный:

grep 'c [aeiouy]' eng_vaalit2012.txt


Могут быть объединены все регулярные выражения. Как делают мы представляем все случаи o плюс любой характер плюс гласный:

кошка vaalit2012.txt | TR '''\n' | sort|uniq|grep 'o.* [aeiouy]'

Скобки могут также использоваться, чтобы искать и заглавные и строчные буквы:

кошка vaalit2012.txt | TR '''\n' | sort|uniq|grep '^in'
кошка vaalit2012.txt | TR '''\n' | sort|uniq|grep '^[Ii] n'


Если мы хотим искать несколько последовательностей, нам нужна расширенная команда grep, egrep.
Здесь прибывает все слова, заканчивающиеся в - луг или - редактор.

кошка vaalit2012.txt | TR '''\n' | sort|uniq|egrep' (ing|ed) $'



Больше информации о регулярных выражениях найдено на Википедию:
* [http://en .wikipedia.org/wiki/Regular_expression]
* [http://ru .wikipedia.org/wiki/Регулярные_выражения]


Встроенная система справочной информации Unix: человек, кстати и информация

У Unix есть очень хорошая встроенная система справочной информации. Если Вы знаете название команды и хотите больше информации, Вы можете написать человеку и названию команды (например, власть человека). 

Есть две проблемы с этой информацией: Вы должны знать название команды, прежде чем Вы сможете спросить, и текст часто немного загадочный. Страницы человека больше всего подходят узнавать, какие флаги использовать с командой, и как они работают.

Чтобы получить более образовательный текст, Вы можете написать информацию вместо человека. Если также, который является слишком загадочным, Вы можете искать в сети. Чтобы получить объяснение на кошке команду, Вы можете искать: Как использовать команду кошки.

Если Вы не уверены в команде, Вы ищете, Вы можете написать кстати название команды (для названия команды, Вы думаете возможно, что Вы ищете). Кстати тогда даст Вам список названий команды, которые могли бы иметь некоторое отношение к нему (и возможно нет!). Обычно 'кстати' команда не настолько полезна.





Список команд Unix:

* [http://en .wikipedia.org/wiki/List_of_Unix_utilities]
* [http://ru .wikipedia.org/wiki/Программы_UNIX-подобных_операционных_систем]