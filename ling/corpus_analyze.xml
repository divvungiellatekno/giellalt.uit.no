<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN"
"http://forrest.apache.org/dtd/document-v20.dtd">
<document xml:lang="en">
  <header>
    <title>Implementation plan for corpus interfaces</title>

    <authors>
      <person email="saara.huhmarniemi@helsinki.fi" name="Saara Huhmarniemi" />
      <person email="borre.gaup@uit.no" name="Børre Gaup" />
    </authors>
  </header>

  <body>
    <section>
      <title id="overview">Overview and introduction</title>

      <p>One of the goals of the giellatekno-project is to provide easy access
      to the text materials for non-commercial purposes such as research. The
      text materials will be available through a query processing tool: a tool
      with which a user can fetch different types of data from the Sámi
      corpora. The raw corpus material is collected in co-operation with the
      owners of the documents. The documents are preprocessed so that the
      texts can be used in research. The process of text collection is
      described in documents <a
      href="corpus_conversion.html">corpus_conversion.html</a> and <a
      href="corpus_conversion_tech.html">corpus_conversion_tech.html. </a>This
      documents describes the process where the document is transferred to the
      graphical corpus interface. The graphical corpus interface is developed
      and maintaned by<a
      href="http://www.hf.uio.no/tekstlab/">Textlaboratoriet</a>in the
      university of Oslo.</p>
    </section>

    <section>
        <title>How to parallelize documents</title>
        
        <p>Files that are ready to be parellellised exist in <code>$GTFREE/prestable/converted</code>. The steps to 
            parallelize between sme and nob are:</p>
        <ol>
            <li>Compile the tools needed for further refinement of the input files: 
                <ol>
                    <li><code>cd $GTHOME/gt</code></li>
                    <li><code>make GTLANG=sme</code></li>
                    <li><code>make GTLANG=sme abbr</code></li>
                    <li><code>cd $GTHOME/st/nob/src</code></li>
                    <li><code>make</code></li>
                </ol>
            </li>
            <li>Make an anchor file using the command (note that different text domains may have different additional anchor files): 
                <ul>
                	<li>
                		<code>generate-anchor-list.pl --lang1=sme --lang2=nob --outdir=$GTFREE $GTHOME/gt/common/src/anchor.txt $GTHOME/gt/common/src/anchor_admin.txt
                		</code>
                	</li>
                </ul>
             </li>
            <li>Compile TCA2, the sentence aligner, using these commands: 
              	<ul>
              		<li>  
              			<code>cd $GTHOME/tools/alignment-tools/tca2</code>
              		</li>
              		<li>
              		<code>ant</code>
            		</li>
            	</ul>
            </li>	
       </ol>
         
         <p>The files may be parallellised in commandline mode.</p>
            <ol>
            <li>Parallelize the files in <code>$GTFREE/prestable/converted/sme</code> 
                and <code>$GTFREE/prestable/converted/nob</code> using this command: 
                <ul><li><code>
                for file in `find $GTFREE/prestable/converted/sme -name \*.xml | grep -v .svn`; 
                do corpus-parallel.pl --lang1=sme --lang2=nob $file ; 
                done
                </code></li></ul>
            </li>
            <li>The output is found in <code>$GTFREE/prestable/tmx/smenob/&lt;sme-filename&gt;.tmx</code></li>
        </ol>


         <p>The files may also be parallellised in graphical mode.</p>
         <ol>
            <li>Issue the command  
             	<ul>
             		<li>
             			<code>
            java -jar $GTHOME/tools/alignment-tools/tca2/dist/lib/alignment.jar
             			</code>
             		</li>
             	</ul>
            </li>
            <li>To load files when starting tca2 in gui mode, issue this command:
            	<ul>
            		<li>
            			<code>
            	java -jar $GTHOME/tools/alignment-tools/tca2/dist/lib/alignment.jar -anchor=&lt;anchorfilename&gt; -in1=&lt;thefirstfileofapairtoalign&gt; -in2=&lt;thesecondfileofapairtoalign&gt;
            	 		</code>
            	 	</li>
            	</ul>
            </li>
   	    </ol>
        
        <p>To parallelize the other way, exchange the values for lang1 and lang2 
            in step 2 and 4, and change the find command in step 4 to <code>find 
            $GTFREE/prestable/converted/nob</code>
        </p>
    </section>
    
    <section>
      <title id="database">Analyzing the corpus text.</title>

      <section>
        <title>The files and formats</title>

        <p>The project-internal corpus format contains the basic elements,
        such as paragraphs, lists and tables that can be extracted from the
        original document format. The xml-format of the Saami corpus resources
        is documented in <a
        href="corpus_conversion.html">corpus_conversion.html</a></p>

        <p> The original name of the document is preserved in the process with
        the suffix indicating the document type, e.g. <code>file.doc.</code>
        When the text is extracted from the original document and moved to
        xml-structure the file gets the extension <code>.xml</code>. So the
        resulting file is <code>file.doc.xml</code>. This file is used as a
        basis for analysis. The analyzed corpus text is by default stored to a
        file <code>file.doc.analyzed.xml. </code> There is one intermediate
        format which is used for alignment of the parallel texts, those files
        are indicated with suffix <code>.sent.xml</code>, e.g.
        <code>file.doc.sent.xml.</code></p>

        <p>The xml-files reside in either <code>$GTFREE/converted</code> or  <code>$GTBOUND/converted</code></p>
      </section>

      <section>
        <title id="xml">XML-format of the analyzed corpus.</title>

        <p>The XML format of the analyzed text is basically the following:</p>

        <source>&lt;p&gt;
 &lt;s&gt;
  &lt;w form="The"&gt;
  &lt;reading lemma="the" POS="DET" /&gt;
  &lt;/w&gt;
  &lt;w form="flies"&gt; 
  &lt;reading lemma="fly" POS="N" /&gt;
  &lt;/w&gt;
 &lt;/s&gt;
&lt;/p&gt;
</source>

        <p>See the description of the dtd.</p>
      </section>

      <section>
        <title>The tool to analyze corpus files:          
        <code>corpus-analyze.pl</code></title>

        <p>Usage:</p>

        <source>corpus-analyze.pl [OPTIONS] XML-FILE</source>

        <p>The document is stored to the corpus database in xml-format that
        consist of sections, paragraphs &lt;p&gt;, lists and tables. Table and
        list elements, which often contain numeric data, are excluded from the
        document when it's prepared for analysis. The paragraphs that are
        marked in some other language than the main language of the document
        can be exclulded as well.</p>

        <p>The following options regulate the exclusion and inclusion of
        elements:</p>

        <source>--tables      Take also &lt;table&gt; -elements, which are excluded by default.
-T  
--lists       Take also &lt;list&gt; -elements, which are excluded by default.
-L
--all         Take all elements.
-a
</source>

        <p>The other options:</p>

        <source>--help               Print the help text and exit.
-h
--lang &lt;lang&gt;        The main language of the document. The language
                     defines the path to the tools.
-l &lt;lang&gt;
--tags=&lt;file&gt;        Location of the file korpustags.txt
-t &lt;file&gt;
--output=&lt;file&gt;      The file for output.
-o &lt;file&gt;
--add_sentences      Add &lt;s&gt;-tags to the document during analysis.
                     Use with files which are not aligned.
--s
--only_add_sentences Add &lt;s&gt; tags using preprocessor and abbr.txt.
                     Do not analyze.
-n</source>

        <p>For example, to analyze the file
        <code>$GTFREE/sme/admin/sd/file.doc.xml</code></p>

        <p>use the following command:</p>

        <source>corpus-analyze.pl --add_sentences --lang=sme --output=file.doc.analyzed.xml $GTFREE/sme/admin/sd/file.doc.xml</source>

        <p>The files in the corpus hierarchy do not contain sentence elements
        (&lt;s&gt;). Sentence elements are the basic units of analysis and
        have to be added with --add_sentences or -s. If this option is not
        given, the &lt;s&gt; tags are assumed to be already added. The
        &lt;s&gt;-elements may be added without analysis, with command:</p>

        <source>corpus-analyze.pl --only_add_sentences --lang=sme --output=file.doc.sent.xml $GTFREE/sme/admin/sd/file.doc.xml</source>

        <p>At the same time when &lt;s&gt;-tags are added, the sentences are
        numbered and given id's. These id's are used in alignment process.</p>
      </section>
    </section>

    <section>
      <title>Parallel files</title>

      <p>Each xml-document in the corpus database contains field for parallel
      documents, which exist in the corpus hierarchy. For example, the header
      section of the North Saami document <code>file.doc.xml</code>may
      contain the fileds: </p>

      <source>&lt;parallel_text location="file_n.doc" xml:lang="nob"/&gt;
&lt;parallel_text location="file_s.doc" xml:lang="smj"/&gt;</source>

      <p>This means that there are two parallel documents for this document in
      the corpus hierarchy. The "location" attribute contains the name of the
      parallel file, which is assumed to be found in the same subdirectory as
      the file <code>file.doc.xml</code>. The information of the parallel
      files can be updated to the xml-document by editing the file-specific
      xsl-file, see the document <a
      href="corpus_conversion.html#Parallel+texts">corpus_conversion.html</a>
      for instructions. These fields conduct the search and processing of the
      parallel texts. </p>

      <section>
        <title>Preprocessing for alignment</title>

        <p>Parallel files are processed by the script
        <code>corpus-parallel.pl</code>. Usage:</p>

        <source>corpus-parallel.pl [OPTIONS] [XML-FILE]</source>

        <source>--help             Print this help text and exit.
-h
--dir=&lt;dir&gt;        The directory where the files are searched.
-d
--lang=&lt;lang&gt;      The main language.
-l &lt;lang&gt;
--plang=&lt;lang&gt;     The language of the parallel document(s).
-p &lt;lang&gt;
--list             List the parallel files, use with option --dir.
-L
--outdir=&lt;dir&gt;     The directory where the output files are stored.
                   Default is /usr/local/share/corp/tmp
-o
</source>

        <p>The parallel documents in some directory may be listed with
        command:</p>

        <source>corpus-parallel.pl --list --lang=sme --dir=$GTFREE/sme/admin &gt; file-list.txt</source>

        <p>The parallel files are preprocessed for alignment by detecting
        sentence boundaries, numbering each sentence and placing it inside
        &lt;s&gt;-element. The command to use is:</p>

        <source>corpus-parallel.pl --lang=sme --plang=nob $GTFREE/sme/admin/file.doc.xml</source>

        <p>The script calls the Perl script corpus-analyze.pl for adding the
        sentence-elements. The tools that are used for sentence boundary
        detection have to be changed in that script. The resulting files are
        stored in <code>$GTFREE/tmp</code>, the resulting file names are:
        <code>file.doc.sent.xml, file_n.doc.sent.xml.</code></p>
      </section>

      <section>
        <title>Aligning documents</title>

        <p>The documents are aligned using <a
        href="http://gandalf.aksis.uib.no/tca2/">TRANSLATION CORPUS ALIGNER
         (TCA) 2</a>by Knut Hofland and Øystein Reigem, slightly modified by
          us so to easily use it from the command line.</p>

        <p>The program gets as input the files that contain numbered
        s-elements:<code>file.doc.sent.xml</code> and
        <code>file_n.doc.sent.xml</code>.</p>
        
        <p>The program outputs three files:</p>
        <ul>
            <li>one file that contains
            the pairings of the sentence-id's. The file name is generally
            <code>file.doc.sent.xml_file_n.doc.sent.xml.xml</code> which indicates
            the order of the paired id lists.</li>
            <li>a file pair where each line corresponds to the parellellised content in the other file.
            These files are named <code>file.doc.sent_new.txt</code> and <code>file_n.doc.sent_new.txt</code></li>
        </ul>
                    
      </section>
    </section>

    <section>
      <title id="morphinfo">Morphological information</title>

      <p>The file korpustags.txt contains the list of tags and their internal
      distrbution. The list below list is not up-to-date, please see the file
      korpustags.txt in cvs.</p>

      <section>
        <title>Corpus tags</title>

        <p>There are the following tag categories:</p>

        <ul>
          <li>Part of speech: N A V Adv Pron CS CC Adp Po Pr Interj Pcle
          Num</li>

          <li>Number or Person/Number: Sg Pl Sg1 Sg2 Sg3 Du1 Du2 Du3 Pl1 Pl2
          Pl3 ConNeg</li>

          <li>Case: Ess Nom Gen Acc Ill Loc Com</li>

          <li>Possessive suffix: PxSg1 PxSg2 PxSg3 PxDu1 PxDu2 PxDu3 PxPl1
          PxPl2 PxPl3</li>

          <li>Clitic: Qst Foc</li>

          <li>Grade: Comp Superl</li>

          <li>Attribute: Attr</li>

          <li>Derivation (We must consider whether to use these..): Pass h
          upmi ...</li>

          <li>Polarity: Neg</li>

          <li>Mood: Ind Pot Cond Imprt ImprtII</li>

          <li>Tense: Prs Prt</li>

          <li>Nominal verb form: Inf Act PrsPrc PrfPrc VGen VAbess Ger ConNeg
          ConNegII</li>

          <li>Pronoun type: Pers Dem Interr Refl Recipr Rel Indef</li>

          <li>Other: PUNCT CLB ABBR ACR</li>

          <li>Punctuation type: LEFT RIGHT</li>

          <li>Num type: Ord Card</li>
        </ul>
      </section>
    </section>

    <section>
      <title></title>

      
    </section>
  </body>
</document>
