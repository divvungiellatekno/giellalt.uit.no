

We first look at how to write localisation, then how to set it up and maintain it.

!!!Writing localisation 

To ''write'' localisation (translate to your language) you go to the directory

{{apps/dicts/nds/src/neahtta/translations/}}

There you find your directory (follow your ISO code). Edit the lines
labeled ''msgstr'' in the file {{LC_MESSAGES/messages.po}}.	Note from the
examples the way the quotation marks are put, with errors here the file
will not work. Do __not__ change the text on the lines marked ''#:'' or 
''msgid''.

Then check in your changes, and then to update the server, follow the procedure in the following section __Recompiling translations for production server__.

Also read [the Oahpa documentation on localisation|../../../ped/common/Localisation.html] in order to see how this works for Oahpa.

!!!To set up and maintain the localisation infrastructure

Internationalization (i18n) in Neahttadigisánit uses Flask-Babel which is an interface for flask to the Python Babel extension

* [http://packages.python.org/Flask-Babel/]
* [http://babel.edgewall.org]
 
Translation strings are marked as with Oahpa, but NDS uses a slightly different
template engine, however no major differences.

Marking translation strings in templates:
[http://jinja.pocoo.org/docs/templates/#i18n-in-templates]

!! Running the commands

In order to run these commands locally on your own machine, you will need to
have a ''virtualenv'' installed. This is because there are a few packages
required to extract strings, and it's easier to just use the automatic install
script.

* See: [Developing NDS|NDSDeveloping.html]

!!!Adding new locales

This comes in three main steps:

* Make sure .dat files exist
* Generate a .po file for the locale
* Check in the .po files
 
The easiest place to do this will be on the {gtweb} server, because the
environment is already configured with the required tools. Otherwise, if you
wish to do this on your local machine, you will need to set up your environment before this works.

* See: [Developing NDS|nds/NDSDeveloping.jspwiki]

All further steps assume that you are doing this on gtweb, if you are
developing, you will know what paths you need to update.

!! Dat files

Unknown locales such as crk and sma need to be defined somewhere. North Saami
is in existence in se.dat, se_NO.dat and se_FI.dat, but this does not help with
languages without two-letter codes.
 
Thus, for those we need to copy some files.
 
# Find out where they are: open python, making sure that the NDS environment is enabled (you will see this in the command prompt)
# Import flask within the python command prompt, observe the path and exit:

{{{
    >>> import flask
    >>> flask
    <module 'flask' from '/path/to/python2.7/site-packages/flask/__init__.pyc'>
}}}

# Then, copy files within Babel:

{{{
    cp /path/to/python2.7/site-packages/babel/localedata/se.dat \
       /path/to/python2.7/site-packages/babel/localedata/sma.dat  
}}}

Thus the new locale will be able to be initialized with the init command below.

!!!Typical i18n management tasks
 
!!Generating a message template
 
Message template files (.pot) are where Babel stores all of the strings, which
it then moves to individual translation .po files.
 
Generating the template is easy. If you are doing this on {gtweb}, as the
{neahtta} user, switch to the project directory first:

{{{
	cd ~/neahtta/
}}}

Then extract all strings to the template file, and update existing projects:

{{{
    pybabel extract -F babel.cfg -k lazy_gettext -o translations/messages.pot .
    pybabel update -i translations/messages.pot -d translations
}}}

Now you can initialize a translation.

{{{
    pybabel init -i translations/messages.pot -d translations -l LANG
}}}

Where LANG is the ISO code for the language project.

!!Update .pot with new strings and automatically merge into .po
 
This is two steps: first run pybabel extract, as above, and then:

{{{
    pybabel extract -F babel.cfg -k lazy_gettext -o translations/messages.pot .
    pybabel update -i translations/messages.pot -d translations
}}}

!!Compiling .po files for use in the interface

{{{
    pybabel compile -d translations
}}}

!! Recompiling translations for production server

1.) log in to the server as the neahtta user
2.) switch to the project directory: ''cd ~/neahtta/''
3.) ''svn up translations/''
4.) ''pybabel compile -d translations''

If everything went good and there were no errors, continue, otherwise if you
need help troubleshooting see the section below (''Common error messages and troubleshooting'').

Then, you need to restart the relevant services.
{{{
sudo service nds-DICT stop
sudo service nds-DICT start
}}}

5.) sudo service nds-DICT stop
6.) sudo service nds-DICT start

(Where DICT is a standin for the project name, e.g., ''baakoeh'', ''valks'', ''sanit'', etc.)

!!! Additional notes...
 
!!Activating the virtual environment
 
If you do not see the environment enabled in the command prompt when you log in
as the Neahttadigisánit user, run the following from this user's home directory:

{{{
    source neahtta_env/bin/activate 
}}}

If you do not see changes to the command prompt name, check ''which python'' to
make sure it is active if you do not see it in the bash prompt. If it still
doesn't work, there are probably problems with virtualenv.
 
Typically you should see something like:

{{{
    (neahtta_env)[neahtta@gtoahpa gtsvn/]$ 
}}}

!!! ISO notes and internationalization language code vs. lexicon/FST language code
 
Because most browsers report what language they use using the 2-character ISO
639-1 code, any localization that has a 2-character code, (north sámi has se,
so lucky!), we must use this code. If it doesn't, then creating new
localizations with the 3-character code (ISO 639-2) will be necessary. Also,
neahtta.py may not actually handle some of these 3-character localizations as
well, so this will need to be fixed.

 
!!! Currently supported localizations:
 
May be found in translations/, but for ease of finding out:

# fi Finnish
# kv (kpv) Komi (TODO: is this actually what komi users' browsers report?)
# lv (lav) Latvian
# mdf Moksha
# mhr Eastern Mari
# mrj Western Mari
# myv Erzya
# no (nob) Norwegian Bokmål
# ru Russian
# se (sme) North Saami
# sma South Saami
# sv Swedish
# yrk Nenets

!!! Common error messages and troubleshooting

!! babel.core.UnknownLocaleError: unknown locale sms

This means that the locale directory is missing a .dat file for the locale.
Follow the procedure in the 'Adding new locales' section.

!! catalog 'translations/sma/LC_MESSAGES/messages.po' is marked as fuzzy, skipping

Babel marks things with ''#, fuzzy'' when it can't find the line in the source
code that the string belongs on, however it's not a big problem if line numbers
are missing. As such, to compile, delete lines containing ''#, fuzzy'', and
alternatively determine why there are no line numbers.

Sometimes the first translation string in the catalogue will be marked fuzzy,
but this is because it is blank. The first message must be blank for the
meta-data, so delete the fuzzy comment if it appears, but leave the string.

