

We first look at how to write localisation, then how to set it up and maintain it.

!!!Writing localisation 

To ''write'' localisation (translate to your language) you go to the directory

{{apps/dicts/nds/src/neahtta/translations/}}

There you find your directory (follow your ISO code). Edit the lines
labeled ''msgstr'' in the file {{LC_MESSAGES/messages.po}}.	Note from the
examples the way the quotation marks are put, with errors here the file
will not work. Do __not__ change the text on the lines marked ''#:'' or 
''msgid''.

Then check in your changes.

Thereafter log in to gtoahpa via ssh.

{{{
sudo su neahtta 
   (evt. sudo su root && sudo su neahtta)
cd
cd neahtta
svn up
pybabel compile -d translations
exit
}}}

Gå ut av root (ctrl-D), til du er deg sjölv ({{whois trond}} etc., with
your own username), and restart the service:

{{{
 sudo service nds-baakoeh stop
 sudo service nds-baakoeh start
}}}

See also [the Oahpa documentation on localisation|../../../ped/common/Localisation.html] in order to see how this works for Oahpa.


!!!To set up and maintain the localisation infrastructure

Internationalization (i18n) in Neahttadigisánit uses Flask-Babel which is an interface for flask to the Python Babel extension

* [http://packages.python.org/Flask-Babel/]
* [http://babel.edgewall.org]
 
Translation strings are marked as with Oahpa, but NDS uses a slightly different template engine, however no major differences.

Marking translation strings in templates: [http://jinja.pocoo.org/docs/templates/#i18n-in-templates]

 
!!!Adding new locales
 
Unknown locales such as crk and sma need to be defined somewhere. North Saami is in existence in se.dat, se_NO.dat and se_FI.dat, but this does not help with languages without two-letter codes.
 
Thus, for those we need to copy some files.
 
# Find out where they are: open python, making sure that the NDS environment is enabled (you will see this in the command prompt)
# Import flask within the python command prompt, observe the path and exit:

{{{
    >>> import flask
    >>> flask
    <module 'flask' from '/path/to/python2.7/site-packages/flask/__init__.pyc'>
}}}

# Then, copy files within Babel:

{{{
    cp /path/to/python2.7/site-packages/babel/localedata/se.dat \
       /path/to/python2.7/site-packages/babel/localedata/sma.dat  
}}}

Thus the new locale will be able to be initialized with the init command below.

 
!!!Typical i18n management tasks
 
!!Generating a message template
 
Message template files (.pot) are where Babel stores all of the strings, which it then moves to individual translation .po files.

 
Generating the template is easy. From the NDS project directory, and with the virtualenv enabled:

{{{
    pybabel extract -F babel.cfg -k lazy_gettext -o translations/messages.pot .
}}}

!!Initializing a translation

{{{
    pybabel init -i translations/messages.pot -d translations -l no
    pybabel init -i translations/messages.pot -d translations -l sma
    etc
}}}

!!Update .pot with new strings and automatically merge into .po
 
This is two steps: first run pybabel extract, as above, and then:

{{{
    pybabel extract -F babel.cfg -k lazy_gettext -o translations/messages.pot .
    pybabel update -i translations/messages.pot -d translations
}}}

!!Compiling .po files for use in the interface

{{{
    pybabel compile -d translations
}}}

!!!Additional notes...
 
!!Activating the virtual environment
 
If you do not see the environment enabled in the command prompt, as the NDS user, run the following:

{{{
    source kursadict_env/bin/activate 
}}}

If you do not see changes to the command prompt name, check which python to make sure it is active if you do not see it in the bash prompt. If it still doesn't work, there are probably problems with virtualenv.

 
Typically you should see something like:

{{{
    (neahtta_env)[neahtta@gtoahpa gtsvn/]$ 
}}}

!!!ISO notes and internationalization language code vs. lexicon/FST language code
 
Because most browsers report what language they use using the 2-character ISO 639-1 code, any localization that has a 2-character code, (north sámi has se, so lucky!), we must use this code. If it doesn't, then creating new localizations with the 3-character code (ISO 639-2) will be necessary. Also, neahtta.py may not actually handle some of these 3-character localizations as well, so this will need to be fixed.

 
!!!Currently supported localizations:
 
May be found in translations/, but for ease of finding out:

 
# se (sme) 
# fi 
# no (nob)

 
Internationalization languages on the way:

# sma
# ru
# myv
# mrj
# kv (kpv) \\
  TODO: is this actually what komi users' browsers report?
# lv (lav)
# mdf
# mhr
# myv
# yrk
# sv

