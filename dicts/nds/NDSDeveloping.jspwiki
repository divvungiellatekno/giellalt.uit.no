

Setting up a development environment goes in three major steps.

# Install virtualenv
# Initialize a virtual environment
# Install requirements.txt in the virtualenv


!!! Install virtualenv

The easiest way is: 

{{{
    pip install virtualenv
}}}

Though you may need to prepend ''sudo''.

For additional help, see [virtualenv|https://pypi.python.org/pypi/virtualenv].

!!! Initialize a virtual environment

Enter the NDS ''src'' directory

{{{
    cd ~/main/apps/dicts/nds/src/
}}}

Create a virtualenv

{{{
    virtualenv env
}}}

Now whenever you intend to work in the project, you can run the following:

{{{
    source env/bin/activate
}}}

And this will switch the paths to use the proper Python installation, with all
of the projects packages installed.

You should see some feedback in the command line or path that the virtual
environment is active.

!!! Install requirements.txt in the virtualenv

Switch to the ''neahtta'' directory:

{{{
    cd ~/main/apps/dicts/nds/src/neahtta/
}}}

And with the virtual environment active, run the following:

{{{
    pip install -r requirements.txt
}}}

Note, you do *not* need to run this as a super user, if you do, there are some
other problems.

!! Beginning a development session

With the environment prepared, you may start work on NDS. However, if you need to set up the environment again, all you need to do is source the virtualenv file

{{{
    source env/bin/activate
}}}

... and then start a development server

{{{
    fab itwewina runserver
}}}

NB: for some changes to config files you will need to stop and restart the
development server.


!Notes

{{{
(env) tf-hsl-m0016:neahtta ttr000$ fab saanih runserver
[localhost] Executing task 'saanih'

Warning: Unable to load SSH config file '/Users/ttr000/.ssh/config'

[localhost] Executing task 'runserver'

Warning: Unable to load SSH config file '/Users/ttr000/.ssh/config'

** Production config not found, using development (*.in)
** Go.
[localhost] local: NDS_CONFIG=configs/saanih.config.yaml.in python neahtta.py dev
* Missing dependency in $PATH: uglifyjs
  Install the executable, check that it is available in $PATH,
    and check that it's executable.

Done.
}}}
