!!!Møte om transfer regler

Tilstede (over hangout): Francis, Trond, Lene


!!Agenda:

* Pattern
* Chunk navn og endring av ordrekkefølge
* Clitics
* Macronavn
* Bidix sanity
* MT-kurs


!! Pattern
Vi kan ikke bruke "not" i pattern, så vi må vi liste opp, slik som vi nå har gjort i <def-cat n="nom"> .

!! Chunk navn og endring av ordrekkefølge

Dagens chunk navn er nokså ad-hoc:
*  8 agreement-np
*  5 nom
*  4 object
*  3 num-noun
*  3 num
*  2 wordfoc
*  2 mainverb
*  2 inf
*  2 adpos_chunk_name
*  1 verb-birra
*  1 sent
*  1 pp-birra
*  1 nubbibeallai
*  1 np
*  1 noun-adv
*  1 haga-po
*  1 default
*  1 adv
*  1 adj-noun
*  1 adj

SN = sintagma nominal... NP/navngruppe

Vi kunne bruke funksjonstagg som navn, som vi igjen kunne vise til i t2x, når vi har behov for å endre ordrekkefølgen:
{{{ noun -- <chunk name="n"> ^n<SN><@SUBJ→>{^... 
noun noun -- <chunk name="n-n"> ^n-n<SN><@SUBJ→>{^...
adj noun --  <chunk name="j-n"> j-n<SN><@SUBJ→>{^...}}}


Vi tar syntag frå sl og legger dem i chunk tags slik:

{{{<def-var n="chunkname"/>


<def-macro n="f_chunkname1" npos="1">
<choose>
     <when>
         <test>
             <or><equal><clip pos="1" side="sl"  part="a_pos"/><lit-tag v="post"/></equal>
     <equal><clip pos="1" side="sl"  part="a_pos"/><lit-tag v="vblex"/></equal>
             </or>
        </test>
            <let><var n="chunkname"/><clip pos="1" side="tl" part="lem"/></let>
    </when>
    <when><test><equal><clip pos="1" side="sl" part="a_pos"/><lit-tag v="n"/></equal></test>
            <let><var n="chunkname"/><lit-tag v="n"/></let>
    </when>
</choose>

</def-macro>

<out>
<chunk namefrom="chunkname">
<tags>
  
  <tag><lit-tag v="SN"/></tag>
  <tag><clip pos="1" side="sl" part="a_syntag"/></tag>
  </tag>
...
</chunk>
</out>

^n<SN><@OBJ→>{...}$

i t2x-fila:
    <def-cat n="OBJL">
       <cat-item tags="SN.@OBJ→"/>
    </def-cat>
}}}

TILTAK:
* Vi omarbeider dagens system til dette.

    
!! Clitics

Dagens løsning:
* bidix for tl: pcle som ikke finnes, men for lexical selection
* disse blir endret fra pcle i position 2 til foc_tag i position 1

!Eksempel fra dagens løsning:
# "ge" enten som eget ord eller som clitic - inputten som pcle
# i lexical selection velges en av disse:
## -uv
## -gin
## -ge
# i t1x: endres til tagg: foc_uv foc_ge foc_gin

!Det samme, med forklart med andre ord:

Analyser:
* sme = smn
* Leago = lea+go
* Lea go = lea go    
* Leage = lea+ge

Bidix:
* lea  go -> lii  -uv     
* lea  ge -> lii  gin  -uv  ge 

Og i t1x: 
{{{
<mlu>
   <lu><!-- leat:leđe --></lu>
   <lu><!-- go:-uv --></lu>
</mlu>
}}}

{{{
^chunk<TAG>{^Lii+-uv$}$
^chunk<TAG>{^Lii+-gin$}$

To generate:

^Lii+-uv$
^Lii+-gin$

Out:

L??-uv
L??gin
    
pevdi-uv        pevdi+N+Sg+Nom+Foc/uv
pevdi-uv        pevdi+N+Sg+Nom+Qst
pevdigin        pevdi+N+Sg+Nom+Foc/gin
}}}

!Francis foreslår en bedre løsning:
# tag or word is only in the relabel script. 
# they should work the same in both languages (unless there is a really pressing _linguistic_ reason why not)


If you get a tag wrong, you don´t get a word generated, so if all focus words are tags, and there is some inconsistency, then if it is a separate word you are ok, but if it is a tag, you donæt get anything generated.

So: 
{{{
foo<n><pl><foc_bar> ---> #foo<n><foc_bar>     foo
foo<n><pl> bar<foc>     ---> fooer #bar<foc>      fooer bar }}}

TILTAK:
* Vi omarbeider dagens system til dette.


!!Macronavn
Vi hadde navn ala "inherenttag-px2", men dette er forvirrende. 2 betyr her at macroen involverer 2 posisjoner. 

Alternative navn:
* "inherenttag-px-2Posit", som nå er brukt i sme-smn
* "inherenttag-px-2Positions" 
* "inherenttag-px[[2]"
* "inherenttag-px[[npos2]"
* "inherenttag-px-npos2"

!!Bidix sanity
Vi ønsker bidix sanity for både sl og tl (bidix-sl-sanity / bidix-tl-sanity) 

TILTAK:
* __Francis__ lager dette

!! MT-kurs 
Siste uka i februar. Francis kan delta på diskusjoner om planer osv via hangouts.

[Om kurset, under framover|160112.html]

