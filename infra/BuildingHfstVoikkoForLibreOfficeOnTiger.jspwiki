!!!Tools

# Install XCode (download [from
  Apple|https://connect.apple.com/cgi-bin/WebObjects/MemberSite.woa/wa/getSoftware?bundleID=19907]
  - free membership required)
# Install [Macports|http://macports.org/] (select the precompiled Tiger binary/dmg)
# Install the svn binary package from 
  [http://svnbinaries.open.collab.net/files/documents/153/2715/file_2715.dat/Subversion%201.6.6%20Universal.dmg] (available on the page [http://svnbinaries.open.collab.net/servlets/ProjectDocumentList?folderID=164&expandFolder=164&folderID=171])
# Install the git binary package for Tiger from
  [http://metastatic.org/source/git-osx.html]

Remember to update your {{$PATH}} as stated in the README for the Git and
Subversion packages.

!!!Prerequisites

Then use MacPorts to install the following requirements.
First, install the apple-gcc42 as a regular install (no universal binary - ppc
isn't supported in the gcc code itself):
{{{
sudo port install apple-gcc42
}}}

Then install the following:
{{{
sudo port install pkgconfig +universal gettext +universal libxmlxx2 +universal libarchive +universal zlib +universal
}}}

Copy the following files from {{/opt/local/lib/}} to a new, local dir (here:
{{/Users/$USER/alibs/}}:

{{{
libarchive.a
libbz2.a
libcrypto.a
libiconv.a
liblzma.a
libxml2.a
libz.a
}}}

!!!Hfst-ospell

Check out the hfst-ospell code and cd into the hfst-ospell dir:

{{{
svn co svn://svn.code.sf.net/p/hfst/code/trunk/hfst-ospell
cd hfst-ospell
}}}

Then do the following (remember to adjust the path to the actual user):

{{{
./autogen.sh

CPATH=/opt/local/include:/usr/local/include:/usr/include \
	./configure CXXFLAGS=" -arch i386 -arch ppc -I/opt/local/include" \
	CPPFLAGS="-I/usr/local/include -I/opt/local/include" \
	CFLAGS="-I/usr/local/include -I/opt/local/include -L/Users/$USER/alibs \
	-L/usr/local/lib -isysroot /Developer/SDKs/MacOSX10.4.sdk -arch i386 \
	-arch ppc -mmacosx-version-min=10.4" \
	LDFLAGS=" -arch i386 -arch ppc -L/Users/$USER/alibs" \
	--enable-static --disable-dependency-tracking --disable-shared

make CFLAGS="-I/usr/local/include -L/Users/$USER/alibs -L/usr/local/lib \
	-isysroot /Developer/SDKs/MacOSX10.4.sdk -arch i386 -arch ppc \
	-mmacosx-version-min=10.4" \
	LINK="gcc -framework CoreFoundation -framework Cocoa -arch i386 -arch ppc" \
	LDFLAGS="-framework CoreFoundation -framework Cocoa"

sudo make install
}}}

and finally copy the static library to the alibs dir:

{{{
cp .libs/libhfstospell.a ../alibs/
}}}


!!!Libvoikko

Check out the source code, cd into it, and prepare configuration:

{{{
git clone git://github.com/voikko/corevoikko.git
cd corevoikko/libvoikko
./autogen.sh
}}}

Configure and build as follows:

{{{
PKG_CONFIG_PATH=/usr/local/lib/pkgconfig/ ./configure \
	CXXFLAGS=" -arch i386 -arch ppc" \
	CPPFLAGS="-I/usr/local/include -I/usr/include -L/Users/adminis/alibs" \
	CFLAGS="-I/usr/local/include -I/usr/include -L/Users/adminis/alibs -isysroot \
	/Developer/SDKs/MacOSX10.4.sdk -arch i386 -arch ppc -mmacosx-version-min=10.4" \
	LDFLAGS=" -arch i386 -arch ppc" \
	--enable-static --disable-dependency-tracking --enable-hfst --disable-shared

make CFLAGS="-I/usr/local/include -I/usr/include -L/Users/adminis/alibs -isysroot \
	/Developer/SDKs/MacOSX10.4.sdk -arch i386 -arch ppc -mmacosx-version-min=10.4" \
	LINK="gcc -framework CoreFoundation -framework Cocoa  -arch i386 -arch ppc" \
	LDFLAGS="-framework CoreFoundation -framework Cocoa"

sudo make install
}}}

!!!LibreOffice Voikko Plugin

Follow the instructions to set up the [LibreOffice SDK|http://www.libreoffice.org/download].

Check out the libreoffice voikko plugin code:

{{{
git clone git://github.com/voikko/libreoffice-voikko.git
}}}

Inside the {{libreoffice-voikko}} dir, create the following dir tree:

{{{
extras/2/
       3/
}}}

There is no need for any files within this dir tree.

Edit the Makefile as follows:
* {{LIBVOIKKO_PATH=/Users/$USER/alibs}} (replace $USER)
* {{STANDALONE_EXTENSION_PATH=extras}}

Then just run {{make}} - and see that the compilation fails with lots of linking
errors. I tried tweaking the Makefile, but nothing helped (and thus nothing
documented). In the end I had to give up, and tried to build for newer systems
instead.
