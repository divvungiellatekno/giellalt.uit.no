How to write documentation as comments in your source code.

There is now preliminary support for writing structured comments to document the
code directly in the source. That is, the lexicon structure, organisation and
content is documented directly ''with'' the lexicon, as comments in a certain
format. This document describes how this is done.

!!!General notes

The basic idea is that comments following a certain format will be extracted and
converted to another format more suitable for publishing for a wider audience.

;Basic rule: Everything that is supposed to be included in the published
 documentation __must__ start with a double comment char followed by a space,
 e.g. in LexC or TwolC it could look like the following:

{{{!! Some documentation text here.}}}

Such comments will be extracted, and converted to a jspwiki document for further processing.

That is, to write comments that should become part of the public documentation, you ''first'' type __two exclamation marks,__ ''then'' __one space,__ and ''then'' the __jspwiki markup__ you want. To get a heading, you thus type the following:

{{{
...some LexC code...
!! !!!Top-level heading
...some LexC code...
}}}

In the resulting jspwiki dokument this is turned into:

{{{
!!!Top-level heading
}}}

;Ignored comments: If a __single__ comment char is used, that comment is ignored,
    and will __not__ be part of the generated documentation.

;Formatting convention: For all source file types, the comments use jspwiki
markup [http://www.jspwiki.org/wiki/TextFormattingRules]. In addition, there is
support for specifying test data.

;Raw copy of source code: To copy a line of source code as is into the
    documentation, add ''two'' comment symbols followed by an equal sign {{!!=}}
    (keeps all whitespace) or ''two'' comment symbols followed by the almost
    equal to sign {{!!≈}} (removes all excessive whitespace) at the
    end of the line you want to copy (possibly followed by your own comments).
    The copied code is stored in the variable @CODE@, which can be used to insert
    the code whereever it is needed.
    This is useful e.g. when you want to cite the code as it is used.

Example (the extra space in the triple { and } in the example is only needed to avoid double triplets, and should not be included in the actual code):

{{{
!! !!Symbols that need to be escaped on the lower side (towards twolc):
!! {{ {
 %[%>%] !!= @CODE@ - Literal >
 %[%<%] !!= @CODE@ - Literal <
!! }} }
}}}

This should give the following jspwiki fragment:

{{{
!!Symbols that need to be escaped on the lower side (towards twolc):
{{ {
 %[%>%]  - Literal >
 %[%<%]  - Literal <
}} }
}}}

In this case we need to encapsulate the multichar symbol declaration within jspwiki source code tags, because otherwise jspwiki will interpret the symbol declaration as links. And we can't escape the bracket using the double bracket notation, because then we are altering the LexC source code. Instead we surround the lines with triple { and }, and just copy the lines in question using the {{!!=}} notation.

The full syntax and specification for the markup conventions has its own [specification page|In-sourceDocumentationSpecification.html].

!!!LexC notes

!!Conventions

Each lexicon is documented __below__ the keyword ''LEXICON''. It is possible to use the keyword @LEXNAME@ in the text, where it will be replaced with the actual lexicon name. A typical lexicon could looke like the following:

{{{
! ================================
!! !!!Nominal inflection sublexica
! ================================

LEXICON N_ODD
!! !!Inflection for odd-syllable nouns: lexicon @LEXNAME@
! -------------------------------------------------------
!
!! Short descrioption of this lexicon, and its purpose.
!
 +N+Sg: N_ODD_SG ;
 +N+Pl: N_ODD_PL ;
 +N:    N_ODD_ESS ;
  +N+SgNomCmp:e%^DISIMP R ;
  +N+SgGenCmp:e%>%^DISIMPn R ;
  +N+PlGenCmp:%>%^DISIMPi R ;
  +N+Der1+Der/Dimin+N:%»adtj GIERIEHTSADTJE ;
}}}

!!Test data

{{{
! Test data:
!!€gt-norm: gierehtse # Odd-syllable test
!!€ gierehtse           gierehtse+N+Sg+Nom
!!€ gierehtsem          gierehtse+N+Sg+Acc
!!$ gieriehtsem         gierehtse+N+Sg+Acc # negative test - don't accept this!
!!€ gierehtsen          gierehtse+N+Sg+Gen
}}}

__NB!__ The negative test data convention is not yet fully functional. For now it is best to avoid it.

The above test data will give the following yaml file (sans header):

{{{
  gierehtse: # #
    gierehtse+N+Sg+Nom: gierehtse # 
    gierehtse+N+Sg+Acc: gierehtsem # 
    gieriehtsem: ~gieriehtsem # gierehtse+N+Sg+Acc
    gierehtse+N+Sg+Gen: gierehtsen # 
}}}

The negative test data is ''NOT'' the way it should be, and this test will fail.

!!!Twolc notes

''Support for TwolC files is not yet implemented.''

Follows the same structure as the LexC comments, except that it documents __twol rules__ instead of lexicons.

A future version might also allow for documentation of Alphabet, Sets and Definitions.

To Be Written.

!!Twolc test data

''Support for TwolC files is not yet implemented.''

Similar to LexC, except that the output is turned into twolc test pairs used in the pair-testing tool.

To Be Written.

!!!Xfst script and regex files

''Support for Xfst files is not yet implemented.''
 
!!!CG3

''Support for CG3 files is not yet implemented.''
