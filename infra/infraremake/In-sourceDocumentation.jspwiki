Content:
* description = paragraphs, heading, formatting=jspwiki
* test data

For all source files, the comments use jspwiki markup
[http://www.jspwiki.org/wiki/TextFormattingRules].

In addition, there is support for specifying test data.

Everything that is supposed to be parsed by the document converter __must__ start with a double comment char followed by a space:

{{{!! Some parsed text here.}}}

!!!Lexc
Comment char = !

!!Multichar_Symbols

All multichar symbols should be contained in a separate section/chapter, with subchapters where indicated by the commented markup.

Example
{{{
Multichar_Symbols

!! !!Escaped chars
 %  !! This is an escaped space, required by HFST to handle multiword
    !! expressions properly. It does not affect the Xerox LexC processing
    !! in any way.

!! !!Tags for POS
 +N +A +Adv +V                                 !! | Open POS'es
 +Pron +CS +CC +Adp +Po +Pr +Interj +Pcle +Num !! | Closed POS'es 

!! !!Tags for sub-POS
!! Some of the above POS's may be further characterised using a sub-POS tag:
 +Prop +Pers +Dem +Interr +Refl +Recipr +Rel +Indef !! | Variants of __+Pron__
 +Coll                                              !! | Collective numerals
}}}

By default each multichar symbol is documented in a definition list, but if followed by table markup, the whole multichar section should be made as a table, with the multichars on the same line as the content of the first cell of the table.

The above LexC comments corresponds to the following jspwiki document:

{{{
!!!Multichar_Symbols

!!Escaped chars
#; {{% }}
##: This is an escaped space, required by HFST to handle multiword
expressions properly. It does not affect the Xerox LexC processing
in any way.

!!Tags for POS
| +N +A +Adv +V                                 | Open POS'es
| +Pron +CS +CC +Adp +Po +Pr +Interj +Pcle +Num | Closed POS'es 

!!Tags for sub-POS

Some of the above POS's may be further characterised using a sub-POS tag:

| +Prop +Pers +Dem +Interr +Refl +Recipr +Rel +Indef | Variants of __+Pron__
| +Coll                                              | Collective numerals
}}}

__NB!__ Note that the definition term syntax isn't according to the jspwiki syntax,
but it works. It requires a non-released version of the forrest wiki plugin.

!!Lexicons

{{{
LEXICON test
!! !!!Heading1 @LEXNAME@
!! some text
}}}

Should give the following jspwiki document:

{{{
!!!Heading 1 test

some text
}}}

!!Test data

Pattern:

{{{
!! €fst-name: TestName1
!! € surface analysis gloss
!! $ surface analysis
!! € surface analysis
!! € surface analysis
!!
!! €fst-name: TestName1
!! € surface analysis gloss
!! € surface analysis
!! € surface analysis
!! € surface analysis
}}}

Output: YAML test data as used by our hfst yaml tester.

The following content, in the source file {{affixes/nouns.lexc}}:

{{{
!! €gt-norm: Talo-test
!! € talo  talo+N+Sg+Nom house
!! $ tallo talo+N+Sg+Nom
}}}

should give the following yaml structure:

{{{
talo+N+Sg+Nom: [talo, ~tallo]
}}}

in the file {{nouns-affixes-tests_gt-norm.yaml}}.

!!!twolc

Comment char = !

Follows the same structure as the LexC comments, except that it documents __twol rules__ instead of lexicons.

A future version might also allow for documentation of Alphabet, Sets and Definitions.

!!Test data

Similar to LexC, except that the output is turned into twolc test pairs used in the pair-testing tool.

!!!Xfst script and regex files

Comment char = ! or #
 
!!!CG3
Comment char = #

rules
