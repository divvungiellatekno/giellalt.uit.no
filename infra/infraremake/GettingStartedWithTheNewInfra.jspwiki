!!!Software requirements

* python 3.1+
* py-yaml
* automake 1.12+
* vislcg3
* OpenFST 1.3.1 (NOT newer! 1.3.2 breaks HFST compilation)
* HFST / Xerox (or both)
* Foma

!!Installation on MacOSX

!XCode

__NB!__ On MacOSX you first need to install the developer tools package XCode. It is freely available from Apple. See the separate [Installing XCode|../InstallingXCode.html]Â page.

!The software packages

Many of the software packages mentioned above can be installed through [MacPorts|http://www.macports.org] (if you don't have MacPorts installed, download and install it first). To install these packages, use the following command:

{{{
sudo port install autoconf automake libtool vislcg3 python32
sudo port install py-yaml subport=py32-yaml
}}}

The rest of the packages need to be installed manually (in the specified order), see the following pages:

# [Foma|../compiling_HFST3.html#Install+Foma+%28optional+for+HFST%2C+but+required+for+our+use+of+HFST%29]
# [HFST|../compiling_HFST3.html#Building+HFST3] (skip the OpenFST and Foma parts, since they are already installed)
# [Xerox|http://www.fsmbook.com]

In the longer run the goal is to also have Foma and HFST available via MacPorts.

!!Installation on other systems

On Debian-based Linux systems you can use debian packages ({{get-opt}}) to install the same set of packages as above. Even HFST is available as a debian package. The remaining tools must be installed manually.

<Detailed instructions forthcoming>

!!!Check out the source code

!!Everything

If you are working with many languages, or with both linguistic analysis and e.g. language learning (Oahpa) or dictionaries, you want to check out everything. That process is documented [on a separate page|../../tools/docu-svn-user.html#The+first+commands].

!!Only the core and the wanted language(s)

If you only do linguistic analysis for a limited number of languages you will do fine by only checking out the core module, and then each language separately.

It can be wise to create a separate directory for holding the core and the language modules. The command to do this is (with the name of the directory set to "langtech"): {{mkdir langtech}}. Then {{cd langtech}} and continue.

To check out the core module, do this:

{{{
svn co https://victorio.uit.no/langtech/trunk/gtcore
}}}

Then add the following to your {{.profile}} or {{.bash_profile}}

{{{
export GTCORE=/path/to/gtcore
}}}

replacing {{/path/to}} with the actual path to the {{gtcore}} directory you just checked out. You need to restart the __Terminal__ application (or open a new terminal window) after you have done this.

Then, for each language you want to work with, do the following:

{{{
svn co https://victorio.uit.no/langtech/trunk/langs/LANGCODE --username <your_username>
}}}

where {{LANGCODE}} is the ISO 639-3 three-letter code for the language. You can see a list of the languages we currently have by looking at [https://victorio.uit.no/langtech/trunk/langs/].

When you have checked out the language(s) you want to work with, then you are ready to...

!!!Actually getting started

When everything is installed and checked out, then do the following:

{{{
cd $GTLANG
./autogen.sh
./configure
}}}

where $GTLANG is the directory name of the language you want to work with. Now you are ready to start working. More info about where to find the different pieces of source code can be found on [this page|NewinfraCatalogues.html].

__WARNING__

You may encounter troubles with your CLASSPATH. We are working on it, 
here is a fix if the compiler complains it is not set:
In the langs directory, write {{export CLASSPATH=}}.


To build the transducers and other tools for linguistic analysis, egdo:

{{{make}}}

To run the preinstalled tests, do:

{{{make check}}}

Happy linguistic coding!
