!!!New infra - infra maintenance

Below there are a couple of example tasks, and steps to take to realise them.

!!! Task - modify an existing target

If you want to change the build procedure (e.g. to add or remove a new feature from a specific fst for all languages), work through this task.

Here is the procedure, with {{dictionary-include.am}} in 
{{am-shared}} as an example.
The local directory {{am-shared}} is an exact copy of:
{{$GTCORE/langs-templates/und/am-shared/}}

# Change {{dictionary-include.am}} locally (for your test language)
  and make sure everything works.
# copy your local {{dictionary-include.am}} to the {{und/am-shared/}} directory
# write a checkin message in {{und/und.timestamp}} 
# check in __both__ {{dictionary-include.am}} and {{und.timestamp}}.
# {{cd $GTHOME/langs}}
# {{./update-all-from-core.sh -t und}}
# check that things are working correctluy for 1-2 other languages
# when everything looks fine, check in ''all languages at once'' (but preferably
  ''only'' the changes coming from {{und/}}

!!!Task - add a new template

Task: add __plx__ and __Hunspell__ conversion to the new infra, but only for a limited set of languages (sma, smj, later sme).

Steps:
# create a new template, and populate it
# add template timestamp to the relevant languages
# add a plx option to the automake and autoconf files
# merge the template
# build and test
# fix bugs in the template, rerun from 3

!!!The steps in detail

!!create a new template, and populate it

We want a new template named {{plxtools}}.

Then, we need to fill that template with the following content:

{{{
plxtools.timestamp
am-shared/plx-include.am            # this is the real build file
tools/spellcheckers/plx/
                        Makefile.am # includes plx-include.am
                        src/        # shared src files - rsrc, rev, version
                        tmp/        # large plx files, make clean safe
}}}

The __Hunspell__ conversion is common to all languages, and is thus part of the {{und/}} template. These parts need to be added to that template:

{{{
am-shared/regex-include.am           # this is the real build file
tools/spellcheckers/filters/            # move common filters in here
                            Makefile.am # includes the usual regex-include.am
}}}

!!add template timestamp to the relevant languages

This is pretty simple:

{{{
cd $GTLANG
touch plxtools.timestamp
svn add plxtools.timestamp
}}}

As soon as the file is created, the merge script will pick take notice, and start merging files from that template to the language with the timestamp file for that template.

!!add a plx option to the automake and autoconf files

Both Hunspell and PLX spellers should by default __not__ be built. To turn them on, one should use something like {{--enable-plx}} and {{--enable-hunspell}}. See the Oahpa ditto for a way of doing this.

!!merge the templates

Merge the template for a specific language as follows:

{{{
cd $GTLANG
../../gtcore/scripts/merge-templates.sh -t plxtools
}}}

That is, specify the template you want to merge using the -t option, both to avoid timeconsuming operations, and to avoid merging several unrelated things at the same time.

!!build and test

Essentially:

{{{
make
make check
}}}

and looking at the output.

!!fix bugs and redo

After the known bugs have been fixed, re-merge, test and evaluate. Iterate till everything works as planned.

!!!Other issues

There are definitely a number of other issues. The goal is to have a portable build system with as few dependencies as possible, and will all dependencies checked for and reported properly to the user if missing.

These goals require that we follow the Autotools conventions, and use supported variables and macros where we earlier often used more homegrown solutions.

See the following sites for useful documentation and help:
* [automake manual|http://www.gnu.org/software/automake/manual/automake.html]
* [autoconf manual|http://www.gnu.org/software/autoconf/manual/autoconf.html]
* [Autotools myth buster|http://www.flameeyes.eu/autotools-mythbuster/index.html]

!!Important pitfalls

* use AC_PROG etc for defining programs and tools;
* use the special MKDIR variable (check the docu for the full name)
* don't require more than really necessary - let the rest be optional, this will allow most stuff to be built on more systems
